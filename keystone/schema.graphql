# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Activity {
  id: ID!
  profile: Profile
  month: Int
  year: Int
  day: Int
  gamesPlayed: Int
}

input ActivityWhereUniqueInput {
  id: ID
}

input ActivityWhereInput {
  AND: [ActivityWhereInput!]
  OR: [ActivityWhereInput!]
  NOT: [ActivityWhereInput!]
  id: IDFilter
  profile: ProfileWhereInput
  month: IntNullableFilter
  year: IntNullableFilter
  day: IntNullableFilter
  gamesPlayed: IntNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input ActivityOrderByInput {
  id: OrderDirection
  month: OrderDirection
  year: OrderDirection
  day: OrderDirection
  gamesPlayed: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ActivityUpdateInput {
  profile: ProfileRelateToOneForUpdateInput
  month: Int
  year: Int
  day: Int
  gamesPlayed: Int
}

input ProfileRelateToOneForUpdateInput {
  create: ProfileCreateInput
  connect: ProfileWhereUniqueInput
  disconnect: Boolean
}

input ActivityUpdateArgs {
  where: ActivityWhereUniqueInput!
  data: ActivityUpdateInput!
}

input ActivityCreateInput {
  profile: ProfileRelateToOneForCreateInput
  month: Int
  year: Int
  day: Int
  gamesPlayed: Int
}

input ProfileRelateToOneForCreateInput {
  create: ProfileCreateInput
  connect: ProfileWhereUniqueInput
}

type ChampionWinrate {
  id: ID!
  profile: Profile
  champion: String
  wins: Int
  games: Int
  spell1Casts: Int
  spell2Casts: Int
  spell3Casts: Int
  spell4Casts: Int
}

input ChampionWinrateWhereUniqueInput {
  id: ID
}

input ChampionWinrateWhereInput {
  AND: [ChampionWinrateWhereInput!]
  OR: [ChampionWinrateWhereInput!]
  NOT: [ChampionWinrateWhereInput!]
  id: IDFilter
  profile: ProfileWhereInput
  champion: StringFilter
  wins: IntNullableFilter
  games: IntNullableFilter
  spell1Casts: IntNullableFilter
  spell2Casts: IntNullableFilter
  spell3Casts: IntNullableFilter
  spell4Casts: IntNullableFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input ChampionWinrateOrderByInput {
  id: OrderDirection
  champion: OrderDirection
  wins: OrderDirection
  games: OrderDirection
  spell1Casts: OrderDirection
  spell2Casts: OrderDirection
  spell3Casts: OrderDirection
  spell4Casts: OrderDirection
}

input ChampionWinrateUpdateInput {
  profile: ProfileRelateToOneForUpdateInput
  champion: String
  wins: Int
  games: Int
  spell1Casts: Int
  spell2Casts: Int
  spell3Casts: Int
  spell4Casts: Int
}

input ChampionWinrateUpdateArgs {
  where: ChampionWinrateWhereUniqueInput!
  data: ChampionWinrateUpdateInput!
}

input ChampionWinrateCreateInput {
  profile: ProfileRelateToOneForCreateInput
  champion: String
  wins: Int
  games: Int
  spell1Casts: Int
  spell2Casts: Int
  spell3Casts: Int
  spell4Casts: Int
}

type Duo {
  id: ID!
  profile: Profile
  name: String
  wins: Int
  losses: Int
  winrate: String
}

input DuoWhereUniqueInput {
  id: ID
}

input DuoWhereInput {
  AND: [DuoWhereInput!]
  OR: [DuoWhereInput!]
  NOT: [DuoWhereInput!]
  id: IDFilter
  profile: ProfileWhereInput
  name: StringFilter
  wins: IntNullableFilter
  losses: IntNullableFilter
  winrate: StringFilter
}

input DuoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  wins: OrderDirection
  losses: OrderDirection
  winrate: OrderDirection
}

input DuoUpdateInput {
  profile: ProfileRelateToOneForUpdateInput
  name: String
  wins: Int
  losses: Int
  winrate: String
}

input DuoUpdateArgs {
  where: DuoWhereUniqueInput!
  data: DuoUpdateInput!
}

input DuoCreateInput {
  profile: ProfileRelateToOneForCreateInput
  name: String
  wins: Int
  losses: Int
  winrate: String
}

type Constant {
  id: ID!
  startTime: String
  currentSeason: String
  seeding: Boolean
}

input ConstantWhereUniqueInput {
  id: ID
}

input ConstantWhereInput {
  AND: [ConstantWhereInput!]
  OR: [ConstantWhereInput!]
  NOT: [ConstantWhereInput!]
  id: IDFilter
  startTime: StringFilter
  currentSeason: StringFilter
  seeding: BooleanFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input ConstantOrderByInput {
  id: OrderDirection
  startTime: OrderDirection
  currentSeason: OrderDirection
  seeding: OrderDirection
}

input ConstantUpdateInput {
  startTime: String
  currentSeason: String
  seeding: Boolean
}

input ConstantUpdateArgs {
  where: ConstantWhereUniqueInput!
  data: ConstantUpdateInput!
}

input ConstantCreateInput {
  startTime: String
  currentSeason: String
  seeding: Boolean
}

type Event {
  id: ID!
  timestamp: Int
  position(
    where: PositionWhereInput! = {}
    orderBy: [PositionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Position!]
  positionCount(where: PositionWhereInput! = {}): Int
}

input EventWhereUniqueInput {
  id: ID
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
  id: IDFilter
  timestamp: IntNullableFilter
  position: PositionManyRelationFilter
}

input PositionManyRelationFilter {
  every: PositionWhereInput
  some: PositionWhereInput
  none: PositionWhereInput
}

input EventOrderByInput {
  id: OrderDirection
  timestamp: OrderDirection
}

input EventUpdateInput {
  timestamp: Int
  position: PositionRelateToManyForUpdateInput
}

input PositionRelateToManyForUpdateInput {
  disconnect: [PositionWhereUniqueInput!]
  set: [PositionWhereUniqueInput!]
  create: [PositionCreateInput!]
  connect: [PositionWhereUniqueInput!]
}

input EventUpdateArgs {
  where: EventWhereUniqueInput!
  data: EventUpdateInput!
}

input EventCreateInput {
  timestamp: Int
  position: PositionRelateToManyForCreateInput
}

input PositionRelateToManyForCreateInput {
  create: [PositionCreateInput!]
  connect: [PositionWhereUniqueInput!]
}

type Game {
  id: ID!
  matchId: String
  gameId: String
  gameCreation: String
  gameStartTimestamp: String
  gameEndTimestamp: String
  duration: Int
  start: String
  gameVersion: String
  blueTeam: Team
  redTeam: Team
  source(
    where: SourceWhereInput! = {}
    orderBy: [SourceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Source!]
  sourceCount(where: SourceWhereInput! = {}): Int
  tournament: String
  gameInSeries: Int
  vod: String
  platformId: String
}

input GameWhereUniqueInput {
  id: ID
  matchId: String
}

input GameWhereInput {
  AND: [GameWhereInput!]
  OR: [GameWhereInput!]
  NOT: [GameWhereInput!]
  id: IDFilter
  matchId: StringFilter
  gameId: StringFilter
  gameCreation: StringFilter
  gameStartTimestamp: StringFilter
  gameEndTimestamp: StringFilter
  duration: IntNullableFilter
  start: StringFilter
  gameVersion: StringFilter
  blueTeam: TeamWhereInput
  redTeam: TeamWhereInput
  source: SourceManyRelationFilter
  tournament: StringFilter
  gameInSeries: IntNullableFilter
  vod: StringFilter
  platformId: StringFilter
}

input SourceManyRelationFilter {
  every: SourceWhereInput
  some: SourceWhereInput
  none: SourceWhereInput
}

input GameOrderByInput {
  id: OrderDirection
  matchId: OrderDirection
  gameId: OrderDirection
  gameCreation: OrderDirection
  gameStartTimestamp: OrderDirection
  gameEndTimestamp: OrderDirection
  duration: OrderDirection
  start: OrderDirection
  gameVersion: OrderDirection
  tournament: OrderDirection
  gameInSeries: OrderDirection
  vod: OrderDirection
  platformId: OrderDirection
}

input GameUpdateInput {
  matchId: String
  gameId: String
  gameCreation: String
  gameStartTimestamp: String
  gameEndTimestamp: String
  duration: Int
  start: String
  gameVersion: String
  blueTeam: TeamRelateToOneForUpdateInput
  redTeam: TeamRelateToOneForUpdateInput
  source: SourceRelateToManyForUpdateInput
  tournament: String
  gameInSeries: Int
  vod: String
  platformId: String
}

input TeamRelateToOneForUpdateInput {
  create: TeamCreateInput
  connect: TeamWhereUniqueInput
  disconnect: Boolean
}

input SourceRelateToManyForUpdateInput {
  disconnect: [SourceWhereUniqueInput!]
  set: [SourceWhereUniqueInput!]
  create: [SourceCreateInput!]
  connect: [SourceWhereUniqueInput!]
}

input GameUpdateArgs {
  where: GameWhereUniqueInput!
  data: GameUpdateInput!
}

input GameCreateInput {
  matchId: String
  gameId: String
  gameCreation: String
  gameStartTimestamp: String
  gameEndTimestamp: String
  duration: Int
  start: String
  gameVersion: String
  blueTeam: TeamRelateToOneForCreateInput
  redTeam: TeamRelateToOneForCreateInput
  source: SourceRelateToManyForCreateInput
  tournament: String
  gameInSeries: Int
  vod: String
  platformId: String
}

input TeamRelateToOneForCreateInput {
  create: TeamCreateInput
  connect: TeamWhereUniqueInput
}

input SourceRelateToManyForCreateInput {
  create: [SourceCreateInput!]
  connect: [SourceWhereUniqueInput!]
}

type Objective {
  id: ID!
  team: Team
  first: Boolean
  kills: Int
  type: String
}

input ObjectiveWhereUniqueInput {
  id: ID
}

input ObjectiveWhereInput {
  AND: [ObjectiveWhereInput!]
  OR: [ObjectiveWhereInput!]
  NOT: [ObjectiveWhereInput!]
  id: IDFilter
  team: TeamWhereInput
  first: BooleanFilter
  kills: IntNullableFilter
  type: StringFilter
}

input ObjectiveOrderByInput {
  id: OrderDirection
  first: OrderDirection
  kills: OrderDirection
  type: OrderDirection
}

input ObjectiveUpdateInput {
  team: TeamRelateToOneForUpdateInput
  first: Boolean
  kills: Int
  type: String
}

input ObjectiveUpdateArgs {
  where: ObjectiveWhereUniqueInput!
  data: ObjectiveUpdateInput!
}

input ObjectiveCreateInput {
  team: TeamRelateToOneForCreateInput
  first: Boolean
  kills: Int
  type: String
}

type PickBan {
  id: ID!
  team: Team
  championId: Int
  pickTurn: Int
}

input PickBanWhereUniqueInput {
  id: ID
}

input PickBanWhereInput {
  AND: [PickBanWhereInput!]
  OR: [PickBanWhereInput!]
  NOT: [PickBanWhereInput!]
  id: IDFilter
  team: TeamWhereInput
  championId: IntNullableFilter
  pickTurn: IntNullableFilter
}

input PickBanOrderByInput {
  id: OrderDirection
  championId: OrderDirection
  pickTurn: OrderDirection
}

input PickBanUpdateInput {
  team: TeamRelateToOneForUpdateInput
  championId: Int
  pickTurn: Int
}

input PickBanUpdateArgs {
  where: PickBanWhereUniqueInput!
  data: PickBanUpdateInput!
}

input PickBanCreateInput {
  team: TeamRelateToOneForCreateInput
  championId: Int
  pickTurn: Int
}

type Player {
  id: ID!
  puuid: String
  accountId: String
  platformId: String
  summonerId: String
  summonerName: String
  summonerLevel: Int
  profileIconId: Int
  revisionDate: String
  kills(
    where: PlayerKillWhereInput! = {}
    orderBy: [PlayerKillOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PlayerKill!]
  killsCount(where: PlayerKillWhereInput! = {}): Int
  deaths(
    where: PlayerKillWhereInput! = {}
    orderBy: [PlayerKillOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PlayerKill!]
  deathsCount(where: PlayerKillWhereInput! = {}): Int
  teams(
    where: TeamWhereInput! = {}
    orderBy: [TeamOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Team!]
  teamsCount(where: TeamWhereInput! = {}): Int
  profile: Profile
  monsterKills(
    where: TeamMonsterKillWhereInput! = {}
    orderBy: [TeamMonsterKillOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [TeamMonsterKill!]
  monsterKillsCount(where: TeamMonsterKillWhereInput! = {}): Int
  buildingKills(
    where: TeamBuildingKillWhereInput! = {}
    orderBy: [TeamBuildingKillOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [TeamBuildingKill!]
  buildingKillsCount(where: TeamBuildingKillWhereInput! = {}): Int
  itemEvent(
    where: PlayerItemEventWhereInput! = {}
    orderBy: [PlayerItemEventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PlayerItemEvent!]
  itemEventCount(where: PlayerItemEventWhereInput! = {}): Int
  endOfGameStats(
    where: PlayerEndOfGameStatWhereInput! = {}
    orderBy: [PlayerEndOfGameStatOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PlayerEndOfGameStat!]
  endOfGameStatsCount(where: PlayerEndOfGameStatWhereInput! = {}): Int
  snapshots(
    where: PlayerSnapshotWhereInput! = {}
    orderBy: [PlayerSnapshotOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PlayerSnapshot!]
  snapshotsCount(where: PlayerSnapshotWhereInput! = {}): Int
  wardEvents(
    where: PlayerWardEventWhereInput! = {}
    orderBy: [PlayerWardEventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PlayerWardEvent!]
  wardEventsCount(where: PlayerWardEventWhereInput! = {}): Int
  skillLevelUpEvents(
    where: PlayerSkillLevelUpEventWhereInput! = {}
    orderBy: [PlayerSkillLevelUpEventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PlayerSkillLevelUpEvent!]
  skillLevelUpEventsCount(where: PlayerSkillLevelUpEventWhereInput! = {}): Int
}

input PlayerWhereUniqueInput {
  id: ID
  puuid: String
}

input PlayerWhereInput {
  AND: [PlayerWhereInput!]
  OR: [PlayerWhereInput!]
  NOT: [PlayerWhereInput!]
  id: IDFilter
  puuid: StringFilter
  accountId: StringFilter
  platformId: StringFilter
  summonerId: StringFilter
  summonerName: StringFilter
  summonerLevel: IntNullableFilter
  profileIconId: IntNullableFilter
  revisionDate: StringFilter
  kills: PlayerKillManyRelationFilter
  deaths: PlayerKillManyRelationFilter
  teams: TeamManyRelationFilter
  profile: ProfileWhereInput
  monsterKills: TeamMonsterKillManyRelationFilter
  buildingKills: TeamBuildingKillManyRelationFilter
  itemEvent: PlayerItemEventManyRelationFilter
  endOfGameStats: PlayerEndOfGameStatManyRelationFilter
  snapshots: PlayerSnapshotManyRelationFilter
  wardEvents: PlayerWardEventManyRelationFilter
  skillLevelUpEvents: PlayerSkillLevelUpEventManyRelationFilter
}

input PlayerKillManyRelationFilter {
  every: PlayerKillWhereInput
  some: PlayerKillWhereInput
  none: PlayerKillWhereInput
}

input TeamManyRelationFilter {
  every: TeamWhereInput
  some: TeamWhereInput
  none: TeamWhereInput
}

input TeamMonsterKillManyRelationFilter {
  every: TeamMonsterKillWhereInput
  some: TeamMonsterKillWhereInput
  none: TeamMonsterKillWhereInput
}

input TeamBuildingKillManyRelationFilter {
  every: TeamBuildingKillWhereInput
  some: TeamBuildingKillWhereInput
  none: TeamBuildingKillWhereInput
}

input PlayerItemEventManyRelationFilter {
  every: PlayerItemEventWhereInput
  some: PlayerItemEventWhereInput
  none: PlayerItemEventWhereInput
}

input PlayerEndOfGameStatManyRelationFilter {
  every: PlayerEndOfGameStatWhereInput
  some: PlayerEndOfGameStatWhereInput
  none: PlayerEndOfGameStatWhereInput
}

input PlayerSnapshotManyRelationFilter {
  every: PlayerSnapshotWhereInput
  some: PlayerSnapshotWhereInput
  none: PlayerSnapshotWhereInput
}

input PlayerWardEventManyRelationFilter {
  every: PlayerWardEventWhereInput
  some: PlayerWardEventWhereInput
  none: PlayerWardEventWhereInput
}

input PlayerSkillLevelUpEventManyRelationFilter {
  every: PlayerSkillLevelUpEventWhereInput
  some: PlayerSkillLevelUpEventWhereInput
  none: PlayerSkillLevelUpEventWhereInput
}

input PlayerOrderByInput {
  id: OrderDirection
  puuid: OrderDirection
  accountId: OrderDirection
  platformId: OrderDirection
  summonerId: OrderDirection
  summonerName: OrderDirection
  summonerLevel: OrderDirection
  profileIconId: OrderDirection
  revisionDate: OrderDirection
}

input PlayerUpdateInput {
  puuid: String
  accountId: String
  platformId: String
  summonerId: String
  summonerName: String
  summonerLevel: Int
  profileIconId: Int
  revisionDate: String
  kills: PlayerKillRelateToManyForUpdateInput
  deaths: PlayerKillRelateToManyForUpdateInput
  teams: TeamRelateToManyForUpdateInput
  profile: ProfileRelateToOneForUpdateInput
  monsterKills: TeamMonsterKillRelateToManyForUpdateInput
  buildingKills: TeamBuildingKillRelateToManyForUpdateInput
  itemEvent: PlayerItemEventRelateToManyForUpdateInput
  endOfGameStats: PlayerEndOfGameStatRelateToManyForUpdateInput
  snapshots: PlayerSnapshotRelateToManyForUpdateInput
  wardEvents: PlayerWardEventRelateToManyForUpdateInput
  skillLevelUpEvents: PlayerSkillLevelUpEventRelateToManyForUpdateInput
}

input PlayerKillRelateToManyForUpdateInput {
  disconnect: [PlayerKillWhereUniqueInput!]
  set: [PlayerKillWhereUniqueInput!]
  create: [PlayerKillCreateInput!]
  connect: [PlayerKillWhereUniqueInput!]
}

input TeamRelateToManyForUpdateInput {
  disconnect: [TeamWhereUniqueInput!]
  set: [TeamWhereUniqueInput!]
  create: [TeamCreateInput!]
  connect: [TeamWhereUniqueInput!]
}

input TeamMonsterKillRelateToManyForUpdateInput {
  disconnect: [TeamMonsterKillWhereUniqueInput!]
  set: [TeamMonsterKillWhereUniqueInput!]
  create: [TeamMonsterKillCreateInput!]
  connect: [TeamMonsterKillWhereUniqueInput!]
}

input TeamBuildingKillRelateToManyForUpdateInput {
  disconnect: [TeamBuildingKillWhereUniqueInput!]
  set: [TeamBuildingKillWhereUniqueInput!]
  create: [TeamBuildingKillCreateInput!]
  connect: [TeamBuildingKillWhereUniqueInput!]
}

input PlayerItemEventRelateToManyForUpdateInput {
  disconnect: [PlayerItemEventWhereUniqueInput!]
  set: [PlayerItemEventWhereUniqueInput!]
  create: [PlayerItemEventCreateInput!]
  connect: [PlayerItemEventWhereUniqueInput!]
}

input PlayerEndOfGameStatRelateToManyForUpdateInput {
  disconnect: [PlayerEndOfGameStatWhereUniqueInput!]
  set: [PlayerEndOfGameStatWhereUniqueInput!]
  create: [PlayerEndOfGameStatCreateInput!]
  connect: [PlayerEndOfGameStatWhereUniqueInput!]
}

input PlayerSnapshotRelateToManyForUpdateInput {
  disconnect: [PlayerSnapshotWhereUniqueInput!]
  set: [PlayerSnapshotWhereUniqueInput!]
  create: [PlayerSnapshotCreateInput!]
  connect: [PlayerSnapshotWhereUniqueInput!]
}

input PlayerWardEventRelateToManyForUpdateInput {
  disconnect: [PlayerWardEventWhereUniqueInput!]
  set: [PlayerWardEventWhereUniqueInput!]
  create: [PlayerWardEventCreateInput!]
  connect: [PlayerWardEventWhereUniqueInput!]
}

input PlayerSkillLevelUpEventRelateToManyForUpdateInput {
  disconnect: [PlayerSkillLevelUpEventWhereUniqueInput!]
  set: [PlayerSkillLevelUpEventWhereUniqueInput!]
  create: [PlayerSkillLevelUpEventCreateInput!]
  connect: [PlayerSkillLevelUpEventWhereUniqueInput!]
}

input PlayerUpdateArgs {
  where: PlayerWhereUniqueInput!
  data: PlayerUpdateInput!
}

input PlayerCreateInput {
  puuid: String
  accountId: String
  platformId: String
  summonerId: String
  summonerName: String
  summonerLevel: Int
  profileIconId: Int
  revisionDate: String
  kills: PlayerKillRelateToManyForCreateInput
  deaths: PlayerKillRelateToManyForCreateInput
  teams: TeamRelateToManyForCreateInput
  profile: ProfileRelateToOneForCreateInput
  monsterKills: TeamMonsterKillRelateToManyForCreateInput
  buildingKills: TeamBuildingKillRelateToManyForCreateInput
  itemEvent: PlayerItemEventRelateToManyForCreateInput
  endOfGameStats: PlayerEndOfGameStatRelateToManyForCreateInput
  snapshots: PlayerSnapshotRelateToManyForCreateInput
  wardEvents: PlayerWardEventRelateToManyForCreateInput
  skillLevelUpEvents: PlayerSkillLevelUpEventRelateToManyForCreateInput
}

input PlayerKillRelateToManyForCreateInput {
  create: [PlayerKillCreateInput!]
  connect: [PlayerKillWhereUniqueInput!]
}

input TeamRelateToManyForCreateInput {
  create: [TeamCreateInput!]
  connect: [TeamWhereUniqueInput!]
}

input TeamMonsterKillRelateToManyForCreateInput {
  create: [TeamMonsterKillCreateInput!]
  connect: [TeamMonsterKillWhereUniqueInput!]
}

input TeamBuildingKillRelateToManyForCreateInput {
  create: [TeamBuildingKillCreateInput!]
  connect: [TeamBuildingKillWhereUniqueInput!]
}

input PlayerItemEventRelateToManyForCreateInput {
  create: [PlayerItemEventCreateInput!]
  connect: [PlayerItemEventWhereUniqueInput!]
}

input PlayerEndOfGameStatRelateToManyForCreateInput {
  create: [PlayerEndOfGameStatCreateInput!]
  connect: [PlayerEndOfGameStatWhereUniqueInput!]
}

input PlayerSnapshotRelateToManyForCreateInput {
  create: [PlayerSnapshotCreateInput!]
  connect: [PlayerSnapshotWhereUniqueInput!]
}

input PlayerWardEventRelateToManyForCreateInput {
  create: [PlayerWardEventCreateInput!]
  connect: [PlayerWardEventWhereUniqueInput!]
}

input PlayerSkillLevelUpEventRelateToManyForCreateInput {
  create: [PlayerSkillLevelUpEventCreateInput!]
  connect: [PlayerSkillLevelUpEventWhereUniqueInput!]
}

type PlayerEndOfGameStat {
  id: ID!
  player: Player
  game: Game
  perks: PlayerRune
  items: PlayerItem
  assists: Int
  baronKills: Int
  bountyLevel: Int
  championExperience: Int
  championLevel: Int
  championId: Int
  championName: String
  championTransform: Int
  consumablesPurchased: Int
  damageDealtToBuildings: Int
  damageDealtToObjectives: Int
  damageDealtToTurrets: Int
  damageSelfMitigated: Int
  deaths: Int
  detectorWardsPlaced: Int
  doubleKills: Int
  dragonKills: Int
  firstBlood: Boolean
  firstBloodAssist: Boolean
  firstTowerKill: Boolean
  firstTowerAssist: Boolean
  gameEndedInEarlySurrender: Boolean
  gameEndedInSurrender: Boolean
  goldEarned: Int
  goldSpent: Int
  individualPosition: String
  inhibitorKills: Int
  inhibitorTakedowns: Int
  inhibitorsLost: Int
  item0: Int
  item1: Int
  item2: Int
  item3: Int
  item4: Int
  item5: Int
  item6: Int
  itemsPurchased: Int
  killingSprees: Int
  kills: Int
  lane: String
  largestCriticalStrike: Int
  largestKillingSpree: Int
  largestMultiKill: Int
  longestTimeSpentLiving: Int
  magicDamageDealt: Int
  magicDamageDealtToChampions: Int
  magicDamageTaken: Int
  neutralMinionsKilled: Int
  nexusKills: Int
  nexusLost: Int
  nexusTakedowns: Int
  objectivesStolen: Int
  objectivesStolenAssists: Int
  participantId: Int
  pentaKills: Int
  physicalDamageDealt: Int
  physicalDamageDealtToChampions: Int
  physicalDamageTaken: Int
  quadraKills: Int
  riotIdName: String
  riotIdTagline: String
  role: String
  sightWardsBoughtInGame: Int
  spell1Casts: Int
  spell2Casts: Int
  spell3Casts: Int
  spell4Casts: Int
  summoner1Casts: Int
  summoner1Id: Int
  summoner2Casts: Int
  summoner2Id: Int
  summonerLevel: Int
  summonerName: String
  teamEarlySurrendered: Boolean
  teamId: Int
  teamPosition: String
  timeCCingOthers: Int
  timePlayed: Int
  totalDamageDealt: Int
  totalDamageDealtToChampions: Int
  totalDamageShieldedOnTeammates: Int
  totalDamageTaken: Int
  totalHeal: Int
  totalHealsOnTeammates: Int
  totalMinionsKilled: Int
  totalTimeCCDealt: Int
  totalTimeSpentDead: Int
  totalUnitsHealed: Int
  tripleKills: Int
  trueDamageDealt: Int
  trueDamageDealtToChampions: Int
  trueDamageTaken: Int
  turretsKilled: Int
  turretTakedowns: Int
  turretsLost: Int
  unrealKills: Int
  visionScore: Int
  visionWardsBoughtInGame: Int
  wardsKilled: Int
  wardsPlaced: Int
  win: Boolean
}

input PlayerEndOfGameStatWhereUniqueInput {
  id: ID
}

input PlayerEndOfGameStatWhereInput {
  AND: [PlayerEndOfGameStatWhereInput!]
  OR: [PlayerEndOfGameStatWhereInput!]
  NOT: [PlayerEndOfGameStatWhereInput!]
  id: IDFilter
  player: PlayerWhereInput
  game: GameWhereInput
  perks: PlayerRuneWhereInput
  items: PlayerItemWhereInput
  assists: IntNullableFilter
  baronKills: IntNullableFilter
  bountyLevel: IntNullableFilter
  championExperience: IntNullableFilter
  championLevel: IntNullableFilter
  championId: IntNullableFilter
  championName: StringFilter
  championTransform: IntNullableFilter
  consumablesPurchased: IntNullableFilter
  damageDealtToBuildings: IntNullableFilter
  damageDealtToObjectives: IntNullableFilter
  damageDealtToTurrets: IntNullableFilter
  damageSelfMitigated: IntNullableFilter
  deaths: IntNullableFilter
  detectorWardsPlaced: IntNullableFilter
  doubleKills: IntNullableFilter
  dragonKills: IntNullableFilter
  firstBlood: BooleanFilter
  firstBloodAssist: BooleanFilter
  firstTowerKill: BooleanFilter
  firstTowerAssist: BooleanFilter
  gameEndedInEarlySurrender: BooleanFilter
  gameEndedInSurrender: BooleanFilter
  goldEarned: IntNullableFilter
  goldSpent: IntNullableFilter
  individualPosition: StringFilter
  inhibitorKills: IntNullableFilter
  inhibitorTakedowns: IntNullableFilter
  inhibitorsLost: IntNullableFilter
  item0: IntNullableFilter
  item1: IntNullableFilter
  item2: IntNullableFilter
  item3: IntNullableFilter
  item4: IntNullableFilter
  item5: IntNullableFilter
  item6: IntNullableFilter
  itemsPurchased: IntNullableFilter
  killingSprees: IntNullableFilter
  kills: IntNullableFilter
  lane: StringFilter
  largestCriticalStrike: IntNullableFilter
  largestKillingSpree: IntNullableFilter
  largestMultiKill: IntNullableFilter
  longestTimeSpentLiving: IntNullableFilter
  magicDamageDealt: IntNullableFilter
  magicDamageDealtToChampions: IntNullableFilter
  magicDamageTaken: IntNullableFilter
  neutralMinionsKilled: IntNullableFilter
  nexusKills: IntNullableFilter
  nexusLost: IntNullableFilter
  nexusTakedowns: IntNullableFilter
  objectivesStolen: IntNullableFilter
  objectivesStolenAssists: IntNullableFilter
  participantId: IntNullableFilter
  pentaKills: IntNullableFilter
  physicalDamageDealt: IntNullableFilter
  physicalDamageDealtToChampions: IntNullableFilter
  physicalDamageTaken: IntNullableFilter
  quadraKills: IntNullableFilter
  riotIdName: StringFilter
  riotIdTagline: StringFilter
  role: StringFilter
  sightWardsBoughtInGame: IntNullableFilter
  spell1Casts: IntNullableFilter
  spell2Casts: IntNullableFilter
  spell3Casts: IntNullableFilter
  spell4Casts: IntNullableFilter
  summoner1Casts: IntNullableFilter
  summoner1Id: IntNullableFilter
  summoner2Casts: IntNullableFilter
  summoner2Id: IntNullableFilter
  summonerLevel: IntNullableFilter
  summonerName: StringFilter
  teamEarlySurrendered: BooleanFilter
  teamId: IntNullableFilter
  teamPosition: StringFilter
  timeCCingOthers: IntNullableFilter
  timePlayed: IntNullableFilter
  totalDamageDealt: IntNullableFilter
  totalDamageDealtToChampions: IntNullableFilter
  totalDamageShieldedOnTeammates: IntNullableFilter
  totalDamageTaken: IntNullableFilter
  totalHeal: IntNullableFilter
  totalHealsOnTeammates: IntNullableFilter
  totalMinionsKilled: IntNullableFilter
  totalTimeCCDealt: IntNullableFilter
  totalTimeSpentDead: IntNullableFilter
  totalUnitsHealed: IntNullableFilter
  tripleKills: IntNullableFilter
  trueDamageDealt: IntNullableFilter
  trueDamageDealtToChampions: IntNullableFilter
  trueDamageTaken: IntNullableFilter
  turretsKilled: IntNullableFilter
  turretTakedowns: IntNullableFilter
  turretsLost: IntNullableFilter
  unrealKills: IntNullableFilter
  visionScore: IntNullableFilter
  visionWardsBoughtInGame: IntNullableFilter
  wardsKilled: IntNullableFilter
  wardsPlaced: IntNullableFilter
  win: BooleanFilter
}

input PlayerEndOfGameStatOrderByInput {
  id: OrderDirection
  assists: OrderDirection
  baronKills: OrderDirection
  bountyLevel: OrderDirection
  championExperience: OrderDirection
  championLevel: OrderDirection
  championId: OrderDirection
  championName: OrderDirection
  championTransform: OrderDirection
  consumablesPurchased: OrderDirection
  damageDealtToBuildings: OrderDirection
  damageDealtToObjectives: OrderDirection
  damageDealtToTurrets: OrderDirection
  damageSelfMitigated: OrderDirection
  deaths: OrderDirection
  detectorWardsPlaced: OrderDirection
  doubleKills: OrderDirection
  dragonKills: OrderDirection
  firstBlood: OrderDirection
  firstBloodAssist: OrderDirection
  firstTowerKill: OrderDirection
  firstTowerAssist: OrderDirection
  gameEndedInEarlySurrender: OrderDirection
  gameEndedInSurrender: OrderDirection
  goldEarned: OrderDirection
  goldSpent: OrderDirection
  individualPosition: OrderDirection
  inhibitorKills: OrderDirection
  inhibitorTakedowns: OrderDirection
  inhibitorsLost: OrderDirection
  item0: OrderDirection
  item1: OrderDirection
  item2: OrderDirection
  item3: OrderDirection
  item4: OrderDirection
  item5: OrderDirection
  item6: OrderDirection
  itemsPurchased: OrderDirection
  killingSprees: OrderDirection
  kills: OrderDirection
  lane: OrderDirection
  largestCriticalStrike: OrderDirection
  largestKillingSpree: OrderDirection
  largestMultiKill: OrderDirection
  longestTimeSpentLiving: OrderDirection
  magicDamageDealt: OrderDirection
  magicDamageDealtToChampions: OrderDirection
  magicDamageTaken: OrderDirection
  neutralMinionsKilled: OrderDirection
  nexusKills: OrderDirection
  nexusLost: OrderDirection
  nexusTakedowns: OrderDirection
  objectivesStolen: OrderDirection
  objectivesStolenAssists: OrderDirection
  participantId: OrderDirection
  pentaKills: OrderDirection
  physicalDamageDealt: OrderDirection
  physicalDamageDealtToChampions: OrderDirection
  physicalDamageTaken: OrderDirection
  quadraKills: OrderDirection
  riotIdName: OrderDirection
  riotIdTagline: OrderDirection
  role: OrderDirection
  sightWardsBoughtInGame: OrderDirection
  spell1Casts: OrderDirection
  spell2Casts: OrderDirection
  spell3Casts: OrderDirection
  spell4Casts: OrderDirection
  summoner1Casts: OrderDirection
  summoner1Id: OrderDirection
  summoner2Casts: OrderDirection
  summoner2Id: OrderDirection
  summonerLevel: OrderDirection
  summonerName: OrderDirection
  teamEarlySurrendered: OrderDirection
  teamId: OrderDirection
  teamPosition: OrderDirection
  timeCCingOthers: OrderDirection
  timePlayed: OrderDirection
  totalDamageDealt: OrderDirection
  totalDamageDealtToChampions: OrderDirection
  totalDamageShieldedOnTeammates: OrderDirection
  totalDamageTaken: OrderDirection
  totalHeal: OrderDirection
  totalHealsOnTeammates: OrderDirection
  totalMinionsKilled: OrderDirection
  totalTimeCCDealt: OrderDirection
  totalTimeSpentDead: OrderDirection
  totalUnitsHealed: OrderDirection
  tripleKills: OrderDirection
  trueDamageDealt: OrderDirection
  trueDamageDealtToChampions: OrderDirection
  trueDamageTaken: OrderDirection
  turretsKilled: OrderDirection
  turretTakedowns: OrderDirection
  turretsLost: OrderDirection
  unrealKills: OrderDirection
  visionScore: OrderDirection
  visionWardsBoughtInGame: OrderDirection
  wardsKilled: OrderDirection
  wardsPlaced: OrderDirection
  win: OrderDirection
}

input PlayerEndOfGameStatUpdateInput {
  player: PlayerRelateToOneForUpdateInput
  game: GameRelateToOneForUpdateInput
  perks: PlayerRuneRelateToOneForUpdateInput
  items: PlayerItemRelateToOneForUpdateInput
  assists: Int
  baronKills: Int
  bountyLevel: Int
  championExperience: Int
  championLevel: Int
  championId: Int
  championName: String
  championTransform: Int
  consumablesPurchased: Int
  damageDealtToBuildings: Int
  damageDealtToObjectives: Int
  damageDealtToTurrets: Int
  damageSelfMitigated: Int
  deaths: Int
  detectorWardsPlaced: Int
  doubleKills: Int
  dragonKills: Int
  firstBlood: Boolean
  firstBloodAssist: Boolean
  firstTowerKill: Boolean
  firstTowerAssist: Boolean
  gameEndedInEarlySurrender: Boolean
  gameEndedInSurrender: Boolean
  goldEarned: Int
  goldSpent: Int
  individualPosition: String
  inhibitorKills: Int
  inhibitorTakedowns: Int
  inhibitorsLost: Int
  item0: Int
  item1: Int
  item2: Int
  item3: Int
  item4: Int
  item5: Int
  item6: Int
  itemsPurchased: Int
  killingSprees: Int
  kills: Int
  lane: String
  largestCriticalStrike: Int
  largestKillingSpree: Int
  largestMultiKill: Int
  longestTimeSpentLiving: Int
  magicDamageDealt: Int
  magicDamageDealtToChampions: Int
  magicDamageTaken: Int
  neutralMinionsKilled: Int
  nexusKills: Int
  nexusLost: Int
  nexusTakedowns: Int
  objectivesStolen: Int
  objectivesStolenAssists: Int
  participantId: Int
  pentaKills: Int
  physicalDamageDealt: Int
  physicalDamageDealtToChampions: Int
  physicalDamageTaken: Int
  quadraKills: Int
  riotIdName: String
  riotIdTagline: String
  role: String
  sightWardsBoughtInGame: Int
  spell1Casts: Int
  spell2Casts: Int
  spell3Casts: Int
  spell4Casts: Int
  summoner1Casts: Int
  summoner1Id: Int
  summoner2Casts: Int
  summoner2Id: Int
  summonerLevel: Int
  summonerName: String
  teamEarlySurrendered: Boolean
  teamId: Int
  teamPosition: String
  timeCCingOthers: Int
  timePlayed: Int
  totalDamageDealt: Int
  totalDamageDealtToChampions: Int
  totalDamageShieldedOnTeammates: Int
  totalDamageTaken: Int
  totalHeal: Int
  totalHealsOnTeammates: Int
  totalMinionsKilled: Int
  totalTimeCCDealt: Int
  totalTimeSpentDead: Int
  totalUnitsHealed: Int
  tripleKills: Int
  trueDamageDealt: Int
  trueDamageDealtToChampions: Int
  trueDamageTaken: Int
  turretsKilled: Int
  turretTakedowns: Int
  turretsLost: Int
  unrealKills: Int
  visionScore: Int
  visionWardsBoughtInGame: Int
  wardsKilled: Int
  wardsPlaced: Int
  win: Boolean
}

input PlayerRelateToOneForUpdateInput {
  create: PlayerCreateInput
  connect: PlayerWhereUniqueInput
  disconnect: Boolean
}

input GameRelateToOneForUpdateInput {
  create: GameCreateInput
  connect: GameWhereUniqueInput
  disconnect: Boolean
}

input PlayerRuneRelateToOneForUpdateInput {
  create: PlayerRuneCreateInput
  connect: PlayerRuneWhereUniqueInput
  disconnect: Boolean
}

input PlayerItemRelateToOneForUpdateInput {
  create: PlayerItemCreateInput
  connect: PlayerItemWhereUniqueInput
  disconnect: Boolean
}

input PlayerEndOfGameStatUpdateArgs {
  where: PlayerEndOfGameStatWhereUniqueInput!
  data: PlayerEndOfGameStatUpdateInput!
}

input PlayerEndOfGameStatCreateInput {
  player: PlayerRelateToOneForCreateInput
  game: GameRelateToOneForCreateInput
  perks: PlayerRuneRelateToOneForCreateInput
  items: PlayerItemRelateToOneForCreateInput
  assists: Int
  baronKills: Int
  bountyLevel: Int
  championExperience: Int
  championLevel: Int
  championId: Int
  championName: String
  championTransform: Int
  consumablesPurchased: Int
  damageDealtToBuildings: Int
  damageDealtToObjectives: Int
  damageDealtToTurrets: Int
  damageSelfMitigated: Int
  deaths: Int
  detectorWardsPlaced: Int
  doubleKills: Int
  dragonKills: Int
  firstBlood: Boolean
  firstBloodAssist: Boolean
  firstTowerKill: Boolean
  firstTowerAssist: Boolean
  gameEndedInEarlySurrender: Boolean
  gameEndedInSurrender: Boolean
  goldEarned: Int
  goldSpent: Int
  individualPosition: String
  inhibitorKills: Int
  inhibitorTakedowns: Int
  inhibitorsLost: Int
  item0: Int
  item1: Int
  item2: Int
  item3: Int
  item4: Int
  item5: Int
  item6: Int
  itemsPurchased: Int
  killingSprees: Int
  kills: Int
  lane: String
  largestCriticalStrike: Int
  largestKillingSpree: Int
  largestMultiKill: Int
  longestTimeSpentLiving: Int
  magicDamageDealt: Int
  magicDamageDealtToChampions: Int
  magicDamageTaken: Int
  neutralMinionsKilled: Int
  nexusKills: Int
  nexusLost: Int
  nexusTakedowns: Int
  objectivesStolen: Int
  objectivesStolenAssists: Int
  participantId: Int
  pentaKills: Int
  physicalDamageDealt: Int
  physicalDamageDealtToChampions: Int
  physicalDamageTaken: Int
  quadraKills: Int
  riotIdName: String
  riotIdTagline: String
  role: String
  sightWardsBoughtInGame: Int
  spell1Casts: Int
  spell2Casts: Int
  spell3Casts: Int
  spell4Casts: Int
  summoner1Casts: Int
  summoner1Id: Int
  summoner2Casts: Int
  summoner2Id: Int
  summonerLevel: Int
  summonerName: String
  teamEarlySurrendered: Boolean
  teamId: Int
  teamPosition: String
  timeCCingOthers: Int
  timePlayed: Int
  totalDamageDealt: Int
  totalDamageDealtToChampions: Int
  totalDamageShieldedOnTeammates: Int
  totalDamageTaken: Int
  totalHeal: Int
  totalHealsOnTeammates: Int
  totalMinionsKilled: Int
  totalTimeCCDealt: Int
  totalTimeSpentDead: Int
  totalUnitsHealed: Int
  tripleKills: Int
  trueDamageDealt: Int
  trueDamageDealtToChampions: Int
  trueDamageTaken: Int
  turretsKilled: Int
  turretTakedowns: Int
  turretsLost: Int
  unrealKills: Int
  visionScore: Int
  visionWardsBoughtInGame: Int
  wardsKilled: Int
  wardsPlaced: Int
  win: Boolean
}

input PlayerRelateToOneForCreateInput {
  create: PlayerCreateInput
  connect: PlayerWhereUniqueInput
}

input GameRelateToOneForCreateInput {
  create: GameCreateInput
  connect: GameWhereUniqueInput
}

input PlayerRuneRelateToOneForCreateInput {
  create: PlayerRuneCreateInput
  connect: PlayerRuneWhereUniqueInput
}

input PlayerItemRelateToOneForCreateInput {
  create: PlayerItemCreateInput
  connect: PlayerItemWhereUniqueInput
}

type PlayerItem {
  id: ID!
  slot: Int
  itemId: Int
  name: String
  playerEndOfGameStat(
    where: PlayerEndOfGameStatWhereInput! = {}
    orderBy: [PlayerEndOfGameStatOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PlayerEndOfGameStat!]
  playerEndOfGameStatCount(where: PlayerEndOfGameStatWhereInput! = {}): Int
}

input PlayerItemWhereUniqueInput {
  id: ID
}

input PlayerItemWhereInput {
  AND: [PlayerItemWhereInput!]
  OR: [PlayerItemWhereInput!]
  NOT: [PlayerItemWhereInput!]
  id: IDFilter
  slot: IntNullableFilter
  itemId: IntNullableFilter
  name: StringFilter
  playerEndOfGameStat: PlayerEndOfGameStatManyRelationFilter
}

input PlayerItemOrderByInput {
  id: OrderDirection
  slot: OrderDirection
  itemId: OrderDirection
  name: OrderDirection
}

input PlayerItemUpdateInput {
  slot: Int
  itemId: Int
  name: String
  playerEndOfGameStat: PlayerEndOfGameStatRelateToManyForUpdateInput
}

input PlayerItemUpdateArgs {
  where: PlayerItemWhereUniqueInput!
  data: PlayerItemUpdateInput!
}

input PlayerItemCreateInput {
  slot: Int
  itemId: Int
  name: String
  playerEndOfGameStat: PlayerEndOfGameStatRelateToManyForCreateInput
}

type PlayerItemEvent {
  id: ID!
  player(
    where: PlayerWhereInput! = {}
    orderBy: [PlayerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Player!]
  playerCount(where: PlayerWhereInput! = {}): Int
  type: String
  itemId: Int
  name: String
  undoId: Int
}

input PlayerItemEventWhereUniqueInput {
  id: ID
}

input PlayerItemEventWhereInput {
  AND: [PlayerItemEventWhereInput!]
  OR: [PlayerItemEventWhereInput!]
  NOT: [PlayerItemEventWhereInput!]
  id: IDFilter
  player: PlayerManyRelationFilter
  type: StringFilter
  itemId: IntNullableFilter
  name: StringFilter
  undoId: IntNullableFilter
}

input PlayerManyRelationFilter {
  every: PlayerWhereInput
  some: PlayerWhereInput
  none: PlayerWhereInput
}

input PlayerItemEventOrderByInput {
  id: OrderDirection
  type: OrderDirection
  itemId: OrderDirection
  name: OrderDirection
  undoId: OrderDirection
}

input PlayerItemEventUpdateInput {
  player: PlayerRelateToManyForUpdateInput
  type: String
  itemId: Int
  name: String
  undoId: Int
}

input PlayerRelateToManyForUpdateInput {
  disconnect: [PlayerWhereUniqueInput!]
  set: [PlayerWhereUniqueInput!]
  create: [PlayerCreateInput!]
  connect: [PlayerWhereUniqueInput!]
}

input PlayerItemEventUpdateArgs {
  where: PlayerItemEventWhereUniqueInput!
  data: PlayerItemEventUpdateInput!
}

input PlayerItemEventCreateInput {
  player: PlayerRelateToManyForCreateInput
  type: String
  itemId: Int
  name: String
  undoId: Int
}

input PlayerRelateToManyForCreateInput {
  create: [PlayerCreateInput!]
  connect: [PlayerWhereUniqueInput!]
}

type PlayerKill {
  id: ID!
  killer(
    where: PlayerWhereInput! = {}
    orderBy: [PlayerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Player!]
  killerCount(where: PlayerWhereInput! = {}): Int
  victim(
    where: PlayerWhereInput! = {}
    orderBy: [PlayerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Player!]
  victimCount(where: PlayerWhereInput! = {}): Int
}

input PlayerKillWhereUniqueInput {
  id: ID
}

input PlayerKillWhereInput {
  AND: [PlayerKillWhereInput!]
  OR: [PlayerKillWhereInput!]
  NOT: [PlayerKillWhereInput!]
  id: IDFilter
  killer: PlayerManyRelationFilter
  victim: PlayerManyRelationFilter
}

input PlayerKillOrderByInput {
  id: OrderDirection
}

input PlayerKillUpdateInput {
  killer: PlayerRelateToManyForUpdateInput
  victim: PlayerRelateToManyForUpdateInput
}

input PlayerKillUpdateArgs {
  where: PlayerKillWhereUniqueInput!
  data: PlayerKillUpdateInput!
}

input PlayerKillCreateInput {
  killer: PlayerRelateToManyForCreateInput
  victim: PlayerRelateToManyForCreateInput
}

type PlayerRune {
  id: ID!
  playerEndOfGameStat: PlayerEndOfGameStat
  runeStyle(
    where: RuneStyleWhereInput! = {}
    orderBy: [RuneStyleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [RuneStyle!]
  runeStyleCount(where: RuneStyleWhereInput! = {}): Int
  defense: Int
  flex: Int
  offense: Int
}

input PlayerRuneWhereUniqueInput {
  id: ID
}

input PlayerRuneWhereInput {
  AND: [PlayerRuneWhereInput!]
  OR: [PlayerRuneWhereInput!]
  NOT: [PlayerRuneWhereInput!]
  id: IDFilter
  playerEndOfGameStat: PlayerEndOfGameStatWhereInput
  runeStyle: RuneStyleManyRelationFilter
  defense: IntNullableFilter
  flex: IntNullableFilter
  offense: IntNullableFilter
}

input RuneStyleManyRelationFilter {
  every: RuneStyleWhereInput
  some: RuneStyleWhereInput
  none: RuneStyleWhereInput
}

input PlayerRuneOrderByInput {
  id: OrderDirection
  defense: OrderDirection
  flex: OrderDirection
  offense: OrderDirection
}

input PlayerRuneUpdateInput {
  playerEndOfGameStat: PlayerEndOfGameStatRelateToOneForUpdateInput
  runeStyle: RuneStyleRelateToManyForUpdateInput
  defense: Int
  flex: Int
  offense: Int
}

input PlayerEndOfGameStatRelateToOneForUpdateInput {
  create: PlayerEndOfGameStatCreateInput
  connect: PlayerEndOfGameStatWhereUniqueInput
  disconnect: Boolean
}

input RuneStyleRelateToManyForUpdateInput {
  disconnect: [RuneStyleWhereUniqueInput!]
  set: [RuneStyleWhereUniqueInput!]
  create: [RuneStyleCreateInput!]
  connect: [RuneStyleWhereUniqueInput!]
}

input PlayerRuneUpdateArgs {
  where: PlayerRuneWhereUniqueInput!
  data: PlayerRuneUpdateInput!
}

input PlayerRuneCreateInput {
  playerEndOfGameStat: PlayerEndOfGameStatRelateToOneForCreateInput
  runeStyle: RuneStyleRelateToManyForCreateInput
  defense: Int
  flex: Int
  offense: Int
}

input PlayerEndOfGameStatRelateToOneForCreateInput {
  create: PlayerEndOfGameStatCreateInput
  connect: PlayerEndOfGameStatWhereUniqueInput
}

input RuneStyleRelateToManyForCreateInput {
  create: [RuneStyleCreateInput!]
  connect: [RuneStyleWhereUniqueInput!]
}

type PlayerSkillLevelUpEvent {
  id: ID!
  player(
    where: PlayerWhereInput! = {}
    orderBy: [PlayerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Player!]
  playerCount(where: PlayerWhereInput! = {}): Int
  type: String
  slot: Int
}

input PlayerSkillLevelUpEventWhereUniqueInput {
  id: ID
}

input PlayerSkillLevelUpEventWhereInput {
  AND: [PlayerSkillLevelUpEventWhereInput!]
  OR: [PlayerSkillLevelUpEventWhereInput!]
  NOT: [PlayerSkillLevelUpEventWhereInput!]
  id: IDFilter
  player: PlayerManyRelationFilter
  type: StringFilter
  slot: IntNullableFilter
}

input PlayerSkillLevelUpEventOrderByInput {
  id: OrderDirection
  type: OrderDirection
  slot: OrderDirection
}

input PlayerSkillLevelUpEventUpdateInput {
  player: PlayerRelateToManyForUpdateInput
  type: String
  slot: Int
}

input PlayerSkillLevelUpEventUpdateArgs {
  where: PlayerSkillLevelUpEventWhereUniqueInput!
  data: PlayerSkillLevelUpEventUpdateInput!
}

input PlayerSkillLevelUpEventCreateInput {
  player: PlayerRelateToManyForCreateInput
  type: String
  slot: Int
}

type PlayerSnapshot {
  id: ID!
  timestamp: Float
  currentGold: Int
  totalGold: Int
  totalGoldDiff: Int
  xp: Int
  xpDiff: Int
  level: Int
  cs: Int
  csDiff: Int
  monstersKilled: Int
  monstersKilledDiff: Int
  position(
    where: PositionWhereInput! = {}
    orderBy: [PositionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Position!]
  positionCount(where: PositionWhereInput! = {}): Int
  player(
    where: PlayerWhereInput! = {}
    orderBy: [PlayerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Player!]
  playerCount(where: PlayerWhereInput! = {}): Int
}

input PlayerSnapshotWhereUniqueInput {
  id: ID
}

input PlayerSnapshotWhereInput {
  AND: [PlayerSnapshotWhereInput!]
  OR: [PlayerSnapshotWhereInput!]
  NOT: [PlayerSnapshotWhereInput!]
  id: IDFilter
  timestamp: FloatNullableFilter
  currentGold: IntNullableFilter
  totalGold: IntNullableFilter
  totalGoldDiff: IntNullableFilter
  xp: IntNullableFilter
  xpDiff: IntNullableFilter
  level: IntNullableFilter
  cs: IntNullableFilter
  csDiff: IntNullableFilter
  monstersKilled: IntNullableFilter
  monstersKilledDiff: IntNullableFilter
  position: PositionManyRelationFilter
  player: PlayerManyRelationFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input PlayerSnapshotOrderByInput {
  id: OrderDirection
  timestamp: OrderDirection
  currentGold: OrderDirection
  totalGold: OrderDirection
  totalGoldDiff: OrderDirection
  xp: OrderDirection
  xpDiff: OrderDirection
  level: OrderDirection
  cs: OrderDirection
  csDiff: OrderDirection
  monstersKilled: OrderDirection
  monstersKilledDiff: OrderDirection
}

input PlayerSnapshotUpdateInput {
  timestamp: Float
  currentGold: Int
  totalGold: Int
  totalGoldDiff: Int
  xp: Int
  xpDiff: Int
  level: Int
  cs: Int
  csDiff: Int
  monstersKilled: Int
  monstersKilledDiff: Int
  position: PositionRelateToManyForUpdateInput
  player: PlayerRelateToManyForUpdateInput
}

input PlayerSnapshotUpdateArgs {
  where: PlayerSnapshotWhereUniqueInput!
  data: PlayerSnapshotUpdateInput!
}

input PlayerSnapshotCreateInput {
  timestamp: Float
  currentGold: Int
  totalGold: Int
  totalGoldDiff: Int
  xp: Int
  xpDiff: Int
  level: Int
  cs: Int
  csDiff: Int
  monstersKilled: Int
  monstersKilledDiff: Int
  position: PositionRelateToManyForCreateInput
  player: PlayerRelateToManyForCreateInput
}

type PlayerWardEvent {
  id: ID!
  player(
    where: PlayerWhereInput! = {}
    orderBy: [PlayerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Player!]
  playerCount(where: PlayerWhereInput! = {}): Int
  type: String
  wardType: PlayerWardEventWardTypeType
}

enum PlayerWardEventWardTypeType {
  YELLOW_TRINKET
  CONTROL_WARD
  SIGHT_WARD
  YELLOW_TRINKET_UPGRADE
  BLUE_TRINKET
  TEEMO_MUSHROOM
  VISION_WARD
  UNDEFINED
}

input PlayerWardEventWhereUniqueInput {
  id: ID
}

input PlayerWardEventWhereInput {
  AND: [PlayerWardEventWhereInput!]
  OR: [PlayerWardEventWhereInput!]
  NOT: [PlayerWardEventWhereInput!]
  id: IDFilter
  player: PlayerManyRelationFilter
  type: StringFilter
  wardType: PlayerWardEventWardTypeTypeNullableFilter
}

input PlayerWardEventWardTypeTypeNullableFilter {
  equals: PlayerWardEventWardTypeType
  in: [PlayerWardEventWardTypeType!]
  notIn: [PlayerWardEventWardTypeType!]
  not: PlayerWardEventWardTypeTypeNullableFilter
}

input PlayerWardEventOrderByInput {
  id: OrderDirection
  type: OrderDirection
  wardType: OrderDirection
}

input PlayerWardEventUpdateInput {
  player: PlayerRelateToManyForUpdateInput
  type: String
  wardType: PlayerWardEventWardTypeType
}

input PlayerWardEventUpdateArgs {
  where: PlayerWardEventWhereUniqueInput!
  data: PlayerWardEventUpdateInput!
}

input PlayerWardEventCreateInput {
  player: PlayerRelateToManyForCreateInput
  type: String
  wardType: PlayerWardEventWardTypeType
}

type Position {
  id: ID!
  event(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  eventCount(where: EventWhereInput! = {}): Int
  x: Int
  y: Int
  playerSnapshot(
    where: PlayerSnapshotWhereInput! = {}
    orderBy: [PlayerSnapshotOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PlayerSnapshot!]
  playerSnapshotCount(where: PlayerSnapshotWhereInput! = {}): Int
}

input PositionWhereUniqueInput {
  id: ID
}

input PositionWhereInput {
  AND: [PositionWhereInput!]
  OR: [PositionWhereInput!]
  NOT: [PositionWhereInput!]
  id: IDFilter
  event: EventManyRelationFilter
  x: IntNullableFilter
  y: IntNullableFilter
  playerSnapshot: PlayerSnapshotManyRelationFilter
}

input EventManyRelationFilter {
  every: EventWhereInput
  some: EventWhereInput
  none: EventWhereInput
}

input PositionOrderByInput {
  id: OrderDirection
  x: OrderDirection
  y: OrderDirection
}

input PositionUpdateInput {
  event: EventRelateToManyForUpdateInput
  x: Int
  y: Int
  playerSnapshot: PlayerSnapshotRelateToManyForUpdateInput
}

input EventRelateToManyForUpdateInput {
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

input PositionUpdateArgs {
  where: PositionWhereUniqueInput!
  data: PositionUpdateInput!
}

input PositionCreateInput {
  event: EventRelateToManyForCreateInput
  x: Int
  y: Int
  playerSnapshot: PlayerSnapshotRelateToManyForCreateInput
}

input EventRelateToManyForCreateInput {
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

type Profile {
  id: ID!
  update: Boolean
  player: Player
  lastUpdate: DateTime
  kills: Int
  deaths: Int
  assists: Int
  kda: String
  winRate: String
  csPerMinute: String
  damagePerMinute: String
  killsPerMinute: String
  goldPerMinute: String
  averageGameTime: String
  averageTimeSpentDead: String
  totalGameTime: String
  activity(
    where: ActivityWhereInput! = {}
    orderBy: [ActivityOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Activity!]
  activityCount(where: ActivityWhereInput! = {}): Int
  championWinrate(
    where: ChampionWinrateWhereInput! = {}
    orderBy: [ChampionWinrateOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ChampionWinrate!]
  championWinrateCount(where: ChampionWinrateWhereInput! = {}): Int
  duos(
    where: DuoWhereInput! = {}
    orderBy: [DuoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Duo!]
  duosCount(where: DuoWhereInput! = {}): Int
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ProfileWhereUniqueInput {
  id: ID
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
  id: IDFilter
  update: BooleanFilter
  player: PlayerWhereInput
  lastUpdate: DateTimeFilter
  kills: IntNullableFilter
  deaths: IntNullableFilter
  assists: IntNullableFilter
  kda: StringFilter
  winRate: StringFilter
  csPerMinute: StringFilter
  damagePerMinute: StringFilter
  killsPerMinute: StringFilter
  goldPerMinute: StringFilter
  averageGameTime: StringFilter
  averageTimeSpentDead: StringFilter
  totalGameTime: StringFilter
  activity: ActivityManyRelationFilter
  championWinrate: ChampionWinrateManyRelationFilter
  duos: DuoManyRelationFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input ActivityManyRelationFilter {
  every: ActivityWhereInput
  some: ActivityWhereInput
  none: ActivityWhereInput
}

input ChampionWinrateManyRelationFilter {
  every: ChampionWinrateWhereInput
  some: ChampionWinrateWhereInput
  none: ChampionWinrateWhereInput
}

input DuoManyRelationFilter {
  every: DuoWhereInput
  some: DuoWhereInput
  none: DuoWhereInput
}

input ProfileOrderByInput {
  id: OrderDirection
  update: OrderDirection
  lastUpdate: OrderDirection
  kills: OrderDirection
  deaths: OrderDirection
  assists: OrderDirection
  kda: OrderDirection
  winRate: OrderDirection
  csPerMinute: OrderDirection
  damagePerMinute: OrderDirection
  killsPerMinute: OrderDirection
  goldPerMinute: OrderDirection
  averageGameTime: OrderDirection
  averageTimeSpentDead: OrderDirection
  totalGameTime: OrderDirection
}

input ProfileUpdateInput {
  update: Boolean
  player: PlayerRelateToOneForUpdateInput
  lastUpdate: DateTime
  kills: Int
  deaths: Int
  assists: Int
  kda: String
  winRate: String
  csPerMinute: String
  damagePerMinute: String
  killsPerMinute: String
  goldPerMinute: String
  averageGameTime: String
  averageTimeSpentDead: String
  totalGameTime: String
  activity: ActivityRelateToManyForUpdateInput
  championWinrate: ChampionWinrateRelateToManyForUpdateInput
  duos: DuoRelateToManyForUpdateInput
}

input ActivityRelateToManyForUpdateInput {
  disconnect: [ActivityWhereUniqueInput!]
  set: [ActivityWhereUniqueInput!]
  create: [ActivityCreateInput!]
  connect: [ActivityWhereUniqueInput!]
}

input ChampionWinrateRelateToManyForUpdateInput {
  disconnect: [ChampionWinrateWhereUniqueInput!]
  set: [ChampionWinrateWhereUniqueInput!]
  create: [ChampionWinrateCreateInput!]
  connect: [ChampionWinrateWhereUniqueInput!]
}

input DuoRelateToManyForUpdateInput {
  disconnect: [DuoWhereUniqueInput!]
  set: [DuoWhereUniqueInput!]
  create: [DuoCreateInput!]
  connect: [DuoWhereUniqueInput!]
}

input ProfileUpdateArgs {
  where: ProfileWhereUniqueInput!
  data: ProfileUpdateInput!
}

input ProfileCreateInput {
  update: Boolean
  player: PlayerRelateToOneForCreateInput
  lastUpdate: DateTime
  kills: Int
  deaths: Int
  assists: Int
  kda: String
  winRate: String
  csPerMinute: String
  damagePerMinute: String
  killsPerMinute: String
  goldPerMinute: String
  averageGameTime: String
  averageTimeSpentDead: String
  totalGameTime: String
  activity: ActivityRelateToManyForCreateInput
  championWinrate: ChampionWinrateRelateToManyForCreateInput
  duos: DuoRelateToManyForCreateInput
}

input ActivityRelateToManyForCreateInput {
  create: [ActivityCreateInput!]
  connect: [ActivityWhereUniqueInput!]
}

input ChampionWinrateRelateToManyForCreateInput {
  create: [ChampionWinrateCreateInput!]
  connect: [ChampionWinrateWhereUniqueInput!]
}

input DuoRelateToManyForCreateInput {
  create: [DuoCreateInput!]
  connect: [DuoWhereUniqueInput!]
}

type SeedIdentifier {
  id: ID!
  identifier: String
  type: String
  timestamp: DateTime
  priority: Boolean
  retrieved: Boolean
}

input SeedIdentifierWhereUniqueInput {
  id: ID
  identifier: String
}

input SeedIdentifierWhereInput {
  AND: [SeedIdentifierWhereInput!]
  OR: [SeedIdentifierWhereInput!]
  NOT: [SeedIdentifierWhereInput!]
  id: IDFilter
  identifier: StringFilter
  type: StringFilter
  timestamp: DateTimeFilter
  priority: BooleanFilter
  retrieved: BooleanFilter
}

input SeedIdentifierOrderByInput {
  id: OrderDirection
  identifier: OrderDirection
  type: OrderDirection
  timestamp: OrderDirection
  priority: OrderDirection
  retrieved: OrderDirection
}

input SeedIdentifierUpdateInput {
  identifier: String
  type: String
  timestamp: DateTime
  priority: Boolean
  retrieved: Boolean
}

input SeedIdentifierUpdateArgs {
  where: SeedIdentifierWhereUniqueInput!
  data: SeedIdentifierUpdateInput!
}

input SeedIdentifierCreateInput {
  identifier: String
  type: String
  timestamp: DateTime
  priority: Boolean
  retrieved: Boolean
}

type Source {
  id: ID!
  game(
    where: GameWhereInput! = {}
    orderBy: [GameOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Game!]
  gameCount(where: GameWhereInput! = {}): Int
  api: String
}

input SourceWhereUniqueInput {
  id: ID
}

input SourceWhereInput {
  AND: [SourceWhereInput!]
  OR: [SourceWhereInput!]
  NOT: [SourceWhereInput!]
  id: IDFilter
  game: GameManyRelationFilter
  api: StringFilter
}

input GameManyRelationFilter {
  every: GameWhereInput
  some: GameWhereInput
  none: GameWhereInput
}

input SourceOrderByInput {
  id: OrderDirection
  api: OrderDirection
}

input SourceUpdateInput {
  game: GameRelateToManyForUpdateInput
  api: String
}

input GameRelateToManyForUpdateInput {
  disconnect: [GameWhereUniqueInput!]
  set: [GameWhereUniqueInput!]
  create: [GameCreateInput!]
  connect: [GameWhereUniqueInput!]
}

input SourceUpdateArgs {
  where: SourceWhereUniqueInput!
  data: SourceUpdateInput!
}

input SourceCreateInput {
  game: GameRelateToManyForCreateInput
  api: String
}

input GameRelateToManyForCreateInput {
  create: [GameCreateInput!]
  connect: [GameWhereUniqueInput!]
}

type Team {
  id: ID!
  pickBan(
    where: PickBanWhereInput! = {}
    orderBy: [PickBanOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PickBan!]
  pickBanCount(where: PickBanWhereInput! = {}): Int
  game: Game
  players(
    where: PlayerWhereInput! = {}
    orderBy: [PlayerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Player!]
  playersCount(where: PlayerWhereInput! = {}): Int
  objectives(
    where: ObjectiveWhereInput! = {}
    orderBy: [ObjectiveOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Objective!]
  objectivesCount(where: ObjectiveWhereInput! = {}): Int
  teamId: Int
  teamMatchId: String
  win: Boolean
}

input TeamWhereUniqueInput {
  id: ID
  teamMatchId: String
}

input TeamWhereInput {
  AND: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  NOT: [TeamWhereInput!]
  id: IDFilter
  pickBan: PickBanManyRelationFilter
  game: GameWhereInput
  players: PlayerManyRelationFilter
  objectives: ObjectiveManyRelationFilter
  teamId: IntNullableFilter
  teamMatchId: StringFilter
  win: BooleanFilter
}

input PickBanManyRelationFilter {
  every: PickBanWhereInput
  some: PickBanWhereInput
  none: PickBanWhereInput
}

input ObjectiveManyRelationFilter {
  every: ObjectiveWhereInput
  some: ObjectiveWhereInput
  none: ObjectiveWhereInput
}

input TeamOrderByInput {
  id: OrderDirection
  teamId: OrderDirection
  teamMatchId: OrderDirection
  win: OrderDirection
}

input TeamUpdateInput {
  pickBan: PickBanRelateToManyForUpdateInput
  game: GameRelateToOneForUpdateInput
  players: PlayerRelateToManyForUpdateInput
  objectives: ObjectiveRelateToManyForUpdateInput
  teamId: Int
  teamMatchId: String
  win: Boolean
}

input PickBanRelateToManyForUpdateInput {
  disconnect: [PickBanWhereUniqueInput!]
  set: [PickBanWhereUniqueInput!]
  create: [PickBanCreateInput!]
  connect: [PickBanWhereUniqueInput!]
}

input ObjectiveRelateToManyForUpdateInput {
  disconnect: [ObjectiveWhereUniqueInput!]
  set: [ObjectiveWhereUniqueInput!]
  create: [ObjectiveCreateInput!]
  connect: [ObjectiveWhereUniqueInput!]
}

input TeamUpdateArgs {
  where: TeamWhereUniqueInput!
  data: TeamUpdateInput!
}

input TeamCreateInput {
  pickBan: PickBanRelateToManyForCreateInput
  game: GameRelateToOneForCreateInput
  players: PlayerRelateToManyForCreateInput
  objectives: ObjectiveRelateToManyForCreateInput
  teamId: Int
  teamMatchId: String
  win: Boolean
}

input PickBanRelateToManyForCreateInput {
  create: [PickBanCreateInput!]
  connect: [PickBanWhereUniqueInput!]
}

input ObjectiveRelateToManyForCreateInput {
  create: [ObjectiveCreateInput!]
  connect: [ObjectiveWhereUniqueInput!]
}

type TeamBuildingKill {
  id: ID!
  killer(
    where: PlayerWhereInput! = {}
    orderBy: [PlayerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Player!]
  killerCount(where: PlayerWhereInput! = {}): Int
  type: String
  lane: String
  side: String
  towerLocation: String
}

input TeamBuildingKillWhereUniqueInput {
  id: ID
}

input TeamBuildingKillWhereInput {
  AND: [TeamBuildingKillWhereInput!]
  OR: [TeamBuildingKillWhereInput!]
  NOT: [TeamBuildingKillWhereInput!]
  id: IDFilter
  killer: PlayerManyRelationFilter
  type: StringFilter
  lane: StringFilter
  side: StringFilter
  towerLocation: StringFilter
}

input TeamBuildingKillOrderByInput {
  id: OrderDirection
  type: OrderDirection
  lane: OrderDirection
  side: OrderDirection
  towerLocation: OrderDirection
}

input TeamBuildingKillUpdateInput {
  killer: PlayerRelateToManyForUpdateInput
  type: String
  lane: String
  side: String
  towerLocation: String
}

input TeamBuildingKillUpdateArgs {
  where: TeamBuildingKillWhereUniqueInput!
  data: TeamBuildingKillUpdateInput!
}

input TeamBuildingKillCreateInput {
  killer: PlayerRelateToManyForCreateInput
  type: String
  lane: String
  side: String
  towerLocation: String
}

type TeamMonsterKill {
  id: ID!
  killer(
    where: PlayerWhereInput! = {}
    orderBy: [PlayerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Player!]
  killerCount(where: PlayerWhereInput! = {}): Int
  type: String
  subType: String
}

input TeamMonsterKillWhereUniqueInput {
  id: ID
}

input TeamMonsterKillWhereInput {
  AND: [TeamMonsterKillWhereInput!]
  OR: [TeamMonsterKillWhereInput!]
  NOT: [TeamMonsterKillWhereInput!]
  id: IDFilter
  killer: PlayerManyRelationFilter
  type: StringFilter
  subType: StringFilter
}

input TeamMonsterKillOrderByInput {
  id: OrderDirection
  type: OrderDirection
  subType: OrderDirection
}

input TeamMonsterKillUpdateInput {
  killer: PlayerRelateToManyForUpdateInput
  type: String
  subType: String
}

input TeamMonsterKillUpdateArgs {
  where: TeamMonsterKillWhereUniqueInput!
  data: TeamMonsterKillUpdateInput!
}

input TeamMonsterKillCreateInput {
  killer: PlayerRelateToManyForCreateInput
  type: String
  subType: String
}

type RuneSelection {
  id: ID!
  runeStyle: RuneStyle
  perk: Int
  var1: Int
  var2: Int
  var3: Int
}

input RuneSelectionWhereUniqueInput {
  id: ID
}

input RuneSelectionWhereInput {
  AND: [RuneSelectionWhereInput!]
  OR: [RuneSelectionWhereInput!]
  NOT: [RuneSelectionWhereInput!]
  id: IDFilter
  runeStyle: RuneStyleWhereInput
  perk: IntNullableFilter
  var1: IntNullableFilter
  var2: IntNullableFilter
  var3: IntNullableFilter
}

input RuneSelectionOrderByInput {
  id: OrderDirection
  perk: OrderDirection
  var1: OrderDirection
  var2: OrderDirection
  var3: OrderDirection
}

input RuneSelectionUpdateInput {
  runeStyle: RuneStyleRelateToOneForUpdateInput
  perk: Int
  var1: Int
  var2: Int
  var3: Int
}

input RuneStyleRelateToOneForUpdateInput {
  create: RuneStyleCreateInput
  connect: RuneStyleWhereUniqueInput
  disconnect: Boolean
}

input RuneSelectionUpdateArgs {
  where: RuneSelectionWhereUniqueInput!
  data: RuneSelectionUpdateInput!
}

input RuneSelectionCreateInput {
  runeStyle: RuneStyleRelateToOneForCreateInput
  perk: Int
  var1: Int
  var2: Int
  var3: Int
}

input RuneStyleRelateToOneForCreateInput {
  create: RuneStyleCreateInput
  connect: RuneStyleWhereUniqueInput
}

type RuneStyle {
  id: ID!
  playerRunes: PlayerRune
  selection(
    where: RuneSelectionWhereInput! = {}
    orderBy: [RuneSelectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [RuneSelection!]
  selectionCount(where: RuneSelectionWhereInput! = {}): Int
  description: String
  style: Int
}

input RuneStyleWhereUniqueInput {
  id: ID
}

input RuneStyleWhereInput {
  AND: [RuneStyleWhereInput!]
  OR: [RuneStyleWhereInput!]
  NOT: [RuneStyleWhereInput!]
  id: IDFilter
  playerRunes: PlayerRuneWhereInput
  selection: RuneSelectionManyRelationFilter
  description: StringFilter
  style: IntNullableFilter
}

input RuneSelectionManyRelationFilter {
  every: RuneSelectionWhereInput
  some: RuneSelectionWhereInput
  none: RuneSelectionWhereInput
}

input RuneStyleOrderByInput {
  id: OrderDirection
  description: OrderDirection
  style: OrderDirection
}

input RuneStyleUpdateInput {
  playerRunes: PlayerRuneRelateToOneForUpdateInput
  selection: RuneSelectionRelateToManyForUpdateInput
  description: String
  style: Int
}

input RuneSelectionRelateToManyForUpdateInput {
  disconnect: [RuneSelectionWhereUniqueInput!]
  set: [RuneSelectionWhereUniqueInput!]
  create: [RuneSelectionCreateInput!]
  connect: [RuneSelectionWhereUniqueInput!]
}

input RuneStyleUpdateArgs {
  where: RuneStyleWhereUniqueInput!
  data: RuneStyleUpdateInput!
}

input RuneStyleCreateInput {
  playerRunes: PlayerRuneRelateToOneForCreateInput
  selection: RuneSelectionRelateToManyForCreateInput
  description: String
  style: Int
}

input RuneSelectionRelateToManyForCreateInput {
  create: [RuneSelectionCreateInput!]
  connect: [RuneSelectionWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createActivity(data: ActivityCreateInput!): Activity
  createActivities(data: [ActivityCreateInput!]!): [Activity]
  updateActivity(
    where: ActivityWhereUniqueInput!
    data: ActivityUpdateInput!
  ): Activity
  updateActivities(data: [ActivityUpdateArgs!]!): [Activity]
  deleteActivity(where: ActivityWhereUniqueInput!): Activity
  deleteActivities(where: [ActivityWhereUniqueInput!]!): [Activity]
  createChampionWinrate(data: ChampionWinrateCreateInput!): ChampionWinrate
  createChampionWinrates(
    data: [ChampionWinrateCreateInput!]!
  ): [ChampionWinrate]
  updateChampionWinrate(
    where: ChampionWinrateWhereUniqueInput!
    data: ChampionWinrateUpdateInput!
  ): ChampionWinrate
  updateChampionWinrates(data: [ChampionWinrateUpdateArgs!]!): [ChampionWinrate]
  deleteChampionWinrate(
    where: ChampionWinrateWhereUniqueInput!
  ): ChampionWinrate
  deleteChampionWinrates(
    where: [ChampionWinrateWhereUniqueInput!]!
  ): [ChampionWinrate]
  createDuo(data: DuoCreateInput!): Duo
  createDuos(data: [DuoCreateInput!]!): [Duo]
  updateDuo(where: DuoWhereUniqueInput!, data: DuoUpdateInput!): Duo
  updateDuos(data: [DuoUpdateArgs!]!): [Duo]
  deleteDuo(where: DuoWhereUniqueInput!): Duo
  deleteDuos(where: [DuoWhereUniqueInput!]!): [Duo]
  createConstant(data: ConstantCreateInput!): Constant
  createConstants(data: [ConstantCreateInput!]!): [Constant]
  updateConstant(
    where: ConstantWhereUniqueInput!
    data: ConstantUpdateInput!
  ): Constant
  updateConstants(data: [ConstantUpdateArgs!]!): [Constant]
  deleteConstant(where: ConstantWhereUniqueInput!): Constant
  deleteConstants(where: [ConstantWhereUniqueInput!]!): [Constant]
  createEvent(data: EventCreateInput!): Event
  createEvents(data: [EventCreateInput!]!): [Event]
  updateEvent(where: EventWhereUniqueInput!, data: EventUpdateInput!): Event
  updateEvents(data: [EventUpdateArgs!]!): [Event]
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEvents(where: [EventWhereUniqueInput!]!): [Event]
  createGame(data: GameCreateInput!): Game
  createGames(data: [GameCreateInput!]!): [Game]
  updateGame(where: GameWhereUniqueInput!, data: GameUpdateInput!): Game
  updateGames(data: [GameUpdateArgs!]!): [Game]
  deleteGame(where: GameWhereUniqueInput!): Game
  deleteGames(where: [GameWhereUniqueInput!]!): [Game]
  createObjective(data: ObjectiveCreateInput!): Objective
  createObjectives(data: [ObjectiveCreateInput!]!): [Objective]
  updateObjective(
    where: ObjectiveWhereUniqueInput!
    data: ObjectiveUpdateInput!
  ): Objective
  updateObjectives(data: [ObjectiveUpdateArgs!]!): [Objective]
  deleteObjective(where: ObjectiveWhereUniqueInput!): Objective
  deleteObjectives(where: [ObjectiveWhereUniqueInput!]!): [Objective]
  createPickBan(data: PickBanCreateInput!): PickBan
  createPickBans(data: [PickBanCreateInput!]!): [PickBan]
  updatePickBan(
    where: PickBanWhereUniqueInput!
    data: PickBanUpdateInput!
  ): PickBan
  updatePickBans(data: [PickBanUpdateArgs!]!): [PickBan]
  deletePickBan(where: PickBanWhereUniqueInput!): PickBan
  deletePickBans(where: [PickBanWhereUniqueInput!]!): [PickBan]
  createPlayer(data: PlayerCreateInput!): Player
  createPlayers(data: [PlayerCreateInput!]!): [Player]
  updatePlayer(where: PlayerWhereUniqueInput!, data: PlayerUpdateInput!): Player
  updatePlayers(data: [PlayerUpdateArgs!]!): [Player]
  deletePlayer(where: PlayerWhereUniqueInput!): Player
  deletePlayers(where: [PlayerWhereUniqueInput!]!): [Player]
  createPlayerEndOfGameStat(
    data: PlayerEndOfGameStatCreateInput!
  ): PlayerEndOfGameStat
  createPlayerEndOfGameStats(
    data: [PlayerEndOfGameStatCreateInput!]!
  ): [PlayerEndOfGameStat]
  updatePlayerEndOfGameStat(
    where: PlayerEndOfGameStatWhereUniqueInput!
    data: PlayerEndOfGameStatUpdateInput!
  ): PlayerEndOfGameStat
  updatePlayerEndOfGameStats(
    data: [PlayerEndOfGameStatUpdateArgs!]!
  ): [PlayerEndOfGameStat]
  deletePlayerEndOfGameStat(
    where: PlayerEndOfGameStatWhereUniqueInput!
  ): PlayerEndOfGameStat
  deletePlayerEndOfGameStats(
    where: [PlayerEndOfGameStatWhereUniqueInput!]!
  ): [PlayerEndOfGameStat]
  createPlayerItem(data: PlayerItemCreateInput!): PlayerItem
  createPlayerItems(data: [PlayerItemCreateInput!]!): [PlayerItem]
  updatePlayerItem(
    where: PlayerItemWhereUniqueInput!
    data: PlayerItemUpdateInput!
  ): PlayerItem
  updatePlayerItems(data: [PlayerItemUpdateArgs!]!): [PlayerItem]
  deletePlayerItem(where: PlayerItemWhereUniqueInput!): PlayerItem
  deletePlayerItems(where: [PlayerItemWhereUniqueInput!]!): [PlayerItem]
  createPlayerItemEvent(data: PlayerItemEventCreateInput!): PlayerItemEvent
  createPlayerItemEvents(
    data: [PlayerItemEventCreateInput!]!
  ): [PlayerItemEvent]
  updatePlayerItemEvent(
    where: PlayerItemEventWhereUniqueInput!
    data: PlayerItemEventUpdateInput!
  ): PlayerItemEvent
  updatePlayerItemEvents(data: [PlayerItemEventUpdateArgs!]!): [PlayerItemEvent]
  deletePlayerItemEvent(
    where: PlayerItemEventWhereUniqueInput!
  ): PlayerItemEvent
  deletePlayerItemEvents(
    where: [PlayerItemEventWhereUniqueInput!]!
  ): [PlayerItemEvent]
  createPlayerKill(data: PlayerKillCreateInput!): PlayerKill
  createPlayerKills(data: [PlayerKillCreateInput!]!): [PlayerKill]
  updatePlayerKill(
    where: PlayerKillWhereUniqueInput!
    data: PlayerKillUpdateInput!
  ): PlayerKill
  updatePlayerKills(data: [PlayerKillUpdateArgs!]!): [PlayerKill]
  deletePlayerKill(where: PlayerKillWhereUniqueInput!): PlayerKill
  deletePlayerKills(where: [PlayerKillWhereUniqueInput!]!): [PlayerKill]
  createPlayerRune(data: PlayerRuneCreateInput!): PlayerRune
  createPlayerRunes(data: [PlayerRuneCreateInput!]!): [PlayerRune]
  updatePlayerRune(
    where: PlayerRuneWhereUniqueInput!
    data: PlayerRuneUpdateInput!
  ): PlayerRune
  updatePlayerRunes(data: [PlayerRuneUpdateArgs!]!): [PlayerRune]
  deletePlayerRune(where: PlayerRuneWhereUniqueInput!): PlayerRune
  deletePlayerRunes(where: [PlayerRuneWhereUniqueInput!]!): [PlayerRune]
  createPlayerSkillLevelUpEvent(
    data: PlayerSkillLevelUpEventCreateInput!
  ): PlayerSkillLevelUpEvent
  createPlayerSkillLevelUpEvents(
    data: [PlayerSkillLevelUpEventCreateInput!]!
  ): [PlayerSkillLevelUpEvent]
  updatePlayerSkillLevelUpEvent(
    where: PlayerSkillLevelUpEventWhereUniqueInput!
    data: PlayerSkillLevelUpEventUpdateInput!
  ): PlayerSkillLevelUpEvent
  updatePlayerSkillLevelUpEvents(
    data: [PlayerSkillLevelUpEventUpdateArgs!]!
  ): [PlayerSkillLevelUpEvent]
  deletePlayerSkillLevelUpEvent(
    where: PlayerSkillLevelUpEventWhereUniqueInput!
  ): PlayerSkillLevelUpEvent
  deletePlayerSkillLevelUpEvents(
    where: [PlayerSkillLevelUpEventWhereUniqueInput!]!
  ): [PlayerSkillLevelUpEvent]
  createPlayerSnapshot(data: PlayerSnapshotCreateInput!): PlayerSnapshot
  createPlayerSnapshots(data: [PlayerSnapshotCreateInput!]!): [PlayerSnapshot]
  updatePlayerSnapshot(
    where: PlayerSnapshotWhereUniqueInput!
    data: PlayerSnapshotUpdateInput!
  ): PlayerSnapshot
  updatePlayerSnapshots(data: [PlayerSnapshotUpdateArgs!]!): [PlayerSnapshot]
  deletePlayerSnapshot(where: PlayerSnapshotWhereUniqueInput!): PlayerSnapshot
  deletePlayerSnapshots(
    where: [PlayerSnapshotWhereUniqueInput!]!
  ): [PlayerSnapshot]
  createPlayerWardEvent(data: PlayerWardEventCreateInput!): PlayerWardEvent
  createPlayerWardEvents(
    data: [PlayerWardEventCreateInput!]!
  ): [PlayerWardEvent]
  updatePlayerWardEvent(
    where: PlayerWardEventWhereUniqueInput!
    data: PlayerWardEventUpdateInput!
  ): PlayerWardEvent
  updatePlayerWardEvents(data: [PlayerWardEventUpdateArgs!]!): [PlayerWardEvent]
  deletePlayerWardEvent(
    where: PlayerWardEventWhereUniqueInput!
  ): PlayerWardEvent
  deletePlayerWardEvents(
    where: [PlayerWardEventWhereUniqueInput!]!
  ): [PlayerWardEvent]
  createPosition(data: PositionCreateInput!): Position
  createPositions(data: [PositionCreateInput!]!): [Position]
  updatePosition(
    where: PositionWhereUniqueInput!
    data: PositionUpdateInput!
  ): Position
  updatePositions(data: [PositionUpdateArgs!]!): [Position]
  deletePosition(where: PositionWhereUniqueInput!): Position
  deletePositions(where: [PositionWhereUniqueInput!]!): [Position]
  createProfile(data: ProfileCreateInput!): Profile
  createProfiles(data: [ProfileCreateInput!]!): [Profile]
  updateProfile(
    where: ProfileWhereUniqueInput!
    data: ProfileUpdateInput!
  ): Profile
  updateProfiles(data: [ProfileUpdateArgs!]!): [Profile]
  deleteProfile(where: ProfileWhereUniqueInput!): Profile
  deleteProfiles(where: [ProfileWhereUniqueInput!]!): [Profile]
  createSeedIdentifier(data: SeedIdentifierCreateInput!): SeedIdentifier
  createSeedIdentifiers(data: [SeedIdentifierCreateInput!]!): [SeedIdentifier]
  updateSeedIdentifier(
    where: SeedIdentifierWhereUniqueInput!
    data: SeedIdentifierUpdateInput!
  ): SeedIdentifier
  updateSeedIdentifiers(data: [SeedIdentifierUpdateArgs!]!): [SeedIdentifier]
  deleteSeedIdentifier(where: SeedIdentifierWhereUniqueInput!): SeedIdentifier
  deleteSeedIdentifiers(
    where: [SeedIdentifierWhereUniqueInput!]!
  ): [SeedIdentifier]
  createSource(data: SourceCreateInput!): Source
  createSources(data: [SourceCreateInput!]!): [Source]
  updateSource(where: SourceWhereUniqueInput!, data: SourceUpdateInput!): Source
  updateSources(data: [SourceUpdateArgs!]!): [Source]
  deleteSource(where: SourceWhereUniqueInput!): Source
  deleteSources(where: [SourceWhereUniqueInput!]!): [Source]
  createTeam(data: TeamCreateInput!): Team
  createTeams(data: [TeamCreateInput!]!): [Team]
  updateTeam(where: TeamWhereUniqueInput!, data: TeamUpdateInput!): Team
  updateTeams(data: [TeamUpdateArgs!]!): [Team]
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deleteTeams(where: [TeamWhereUniqueInput!]!): [Team]
  createTeamBuildingKill(data: TeamBuildingKillCreateInput!): TeamBuildingKill
  createTeamBuildingKills(
    data: [TeamBuildingKillCreateInput!]!
  ): [TeamBuildingKill]
  updateTeamBuildingKill(
    where: TeamBuildingKillWhereUniqueInput!
    data: TeamBuildingKillUpdateInput!
  ): TeamBuildingKill
  updateTeamBuildingKills(
    data: [TeamBuildingKillUpdateArgs!]!
  ): [TeamBuildingKill]
  deleteTeamBuildingKill(
    where: TeamBuildingKillWhereUniqueInput!
  ): TeamBuildingKill
  deleteTeamBuildingKills(
    where: [TeamBuildingKillWhereUniqueInput!]!
  ): [TeamBuildingKill]
  createTeamMonsterKill(data: TeamMonsterKillCreateInput!): TeamMonsterKill
  createTeamMonsterKills(
    data: [TeamMonsterKillCreateInput!]!
  ): [TeamMonsterKill]
  updateTeamMonsterKill(
    where: TeamMonsterKillWhereUniqueInput!
    data: TeamMonsterKillUpdateInput!
  ): TeamMonsterKill
  updateTeamMonsterKills(data: [TeamMonsterKillUpdateArgs!]!): [TeamMonsterKill]
  deleteTeamMonsterKill(
    where: TeamMonsterKillWhereUniqueInput!
  ): TeamMonsterKill
  deleteTeamMonsterKills(
    where: [TeamMonsterKillWhereUniqueInput!]!
  ): [TeamMonsterKill]
  createRuneSelection(data: RuneSelectionCreateInput!): RuneSelection
  createRuneSelections(data: [RuneSelectionCreateInput!]!): [RuneSelection]
  updateRuneSelection(
    where: RuneSelectionWhereUniqueInput!
    data: RuneSelectionUpdateInput!
  ): RuneSelection
  updateRuneSelections(data: [RuneSelectionUpdateArgs!]!): [RuneSelection]
  deleteRuneSelection(where: RuneSelectionWhereUniqueInput!): RuneSelection
  deleteRuneSelections(
    where: [RuneSelectionWhereUniqueInput!]!
  ): [RuneSelection]
  createRuneStyle(data: RuneStyleCreateInput!): RuneStyle
  createRuneStyles(data: [RuneStyleCreateInput!]!): [RuneStyle]
  updateRuneStyle(
    where: RuneStyleWhereUniqueInput!
    data: RuneStyleUpdateInput!
  ): RuneStyle
  updateRuneStyles(data: [RuneStyleUpdateArgs!]!): [RuneStyle]
  deleteRuneStyle(where: RuneStyleWhereUniqueInput!): RuneStyle
  deleteRuneStyles(where: [RuneStyleWhereUniqueInput!]!): [RuneStyle]
}

type Query {
  activities(
    where: ActivityWhereInput! = {}
    orderBy: [ActivityOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Activity!]
  activity(where: ActivityWhereUniqueInput!): Activity
  activitiesCount(where: ActivityWhereInput! = {}): Int
  championWinrates(
    where: ChampionWinrateWhereInput! = {}
    orderBy: [ChampionWinrateOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ChampionWinrate!]
  championWinrate(where: ChampionWinrateWhereUniqueInput!): ChampionWinrate
  championWinratesCount(where: ChampionWinrateWhereInput! = {}): Int
  duos(
    where: DuoWhereInput! = {}
    orderBy: [DuoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Duo!]
  duo(where: DuoWhereUniqueInput!): Duo
  duosCount(where: DuoWhereInput! = {}): Int
  constants(
    where: ConstantWhereInput! = {}
    orderBy: [ConstantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Constant!]
  constant(where: ConstantWhereUniqueInput!): Constant
  constantsCount(where: ConstantWhereInput! = {}): Int
  events(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  event(where: EventWhereUniqueInput!): Event
  eventsCount(where: EventWhereInput! = {}): Int
  games(
    where: GameWhereInput! = {}
    orderBy: [GameOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Game!]
  game(where: GameWhereUniqueInput!): Game
  gamesCount(where: GameWhereInput! = {}): Int
  objectives(
    where: ObjectiveWhereInput! = {}
    orderBy: [ObjectiveOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Objective!]
  objective(where: ObjectiveWhereUniqueInput!): Objective
  objectivesCount(where: ObjectiveWhereInput! = {}): Int
  pickBans(
    where: PickBanWhereInput! = {}
    orderBy: [PickBanOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PickBan!]
  pickBan(where: PickBanWhereUniqueInput!): PickBan
  pickBansCount(where: PickBanWhereInput! = {}): Int
  players(
    where: PlayerWhereInput! = {}
    orderBy: [PlayerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Player!]
  player(where: PlayerWhereUniqueInput!): Player
  playersCount(where: PlayerWhereInput! = {}): Int
  playerEndOfGameStats(
    where: PlayerEndOfGameStatWhereInput! = {}
    orderBy: [PlayerEndOfGameStatOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PlayerEndOfGameStat!]
  playerEndOfGameStat(
    where: PlayerEndOfGameStatWhereUniqueInput!
  ): PlayerEndOfGameStat
  playerEndOfGameStatsCount(where: PlayerEndOfGameStatWhereInput! = {}): Int
  playerItems(
    where: PlayerItemWhereInput! = {}
    orderBy: [PlayerItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PlayerItem!]
  playerItem(where: PlayerItemWhereUniqueInput!): PlayerItem
  playerItemsCount(where: PlayerItemWhereInput! = {}): Int
  playerItemEvents(
    where: PlayerItemEventWhereInput! = {}
    orderBy: [PlayerItemEventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PlayerItemEvent!]
  playerItemEvent(where: PlayerItemEventWhereUniqueInput!): PlayerItemEvent
  playerItemEventsCount(where: PlayerItemEventWhereInput! = {}): Int
  playerKills(
    where: PlayerKillWhereInput! = {}
    orderBy: [PlayerKillOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PlayerKill!]
  playerKill(where: PlayerKillWhereUniqueInput!): PlayerKill
  playerKillsCount(where: PlayerKillWhereInput! = {}): Int
  playerRunes(
    where: PlayerRuneWhereInput! = {}
    orderBy: [PlayerRuneOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PlayerRune!]
  playerRune(where: PlayerRuneWhereUniqueInput!): PlayerRune
  playerRunesCount(where: PlayerRuneWhereInput! = {}): Int
  playerSkillLevelUpEvents(
    where: PlayerSkillLevelUpEventWhereInput! = {}
    orderBy: [PlayerSkillLevelUpEventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PlayerSkillLevelUpEvent!]
  playerSkillLevelUpEvent(
    where: PlayerSkillLevelUpEventWhereUniqueInput!
  ): PlayerSkillLevelUpEvent
  playerSkillLevelUpEventsCount(
    where: PlayerSkillLevelUpEventWhereInput! = {}
  ): Int
  playerSnapshots(
    where: PlayerSnapshotWhereInput! = {}
    orderBy: [PlayerSnapshotOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PlayerSnapshot!]
  playerSnapshot(where: PlayerSnapshotWhereUniqueInput!): PlayerSnapshot
  playerSnapshotsCount(where: PlayerSnapshotWhereInput! = {}): Int
  playerWardEvents(
    where: PlayerWardEventWhereInput! = {}
    orderBy: [PlayerWardEventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PlayerWardEvent!]
  playerWardEvent(where: PlayerWardEventWhereUniqueInput!): PlayerWardEvent
  playerWardEventsCount(where: PlayerWardEventWhereInput! = {}): Int
  positions(
    where: PositionWhereInput! = {}
    orderBy: [PositionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Position!]
  position(where: PositionWhereUniqueInput!): Position
  positionsCount(where: PositionWhereInput! = {}): Int
  profiles(
    where: ProfileWhereInput! = {}
    orderBy: [ProfileOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Profile!]
  profile(where: ProfileWhereUniqueInput!): Profile
  profilesCount(where: ProfileWhereInput! = {}): Int
  seedIdentifiers(
    where: SeedIdentifierWhereInput! = {}
    orderBy: [SeedIdentifierOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [SeedIdentifier!]
  seedIdentifier(where: SeedIdentifierWhereUniqueInput!): SeedIdentifier
  seedIdentifiersCount(where: SeedIdentifierWhereInput! = {}): Int
  sources(
    where: SourceWhereInput! = {}
    orderBy: [SourceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Source!]
  source(where: SourceWhereUniqueInput!): Source
  sourcesCount(where: SourceWhereInput! = {}): Int
  teams(
    where: TeamWhereInput! = {}
    orderBy: [TeamOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Team!]
  team(where: TeamWhereUniqueInput!): Team
  teamsCount(where: TeamWhereInput! = {}): Int
  teamBuildingKills(
    where: TeamBuildingKillWhereInput! = {}
    orderBy: [TeamBuildingKillOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [TeamBuildingKill!]
  teamBuildingKill(where: TeamBuildingKillWhereUniqueInput!): TeamBuildingKill
  teamBuildingKillsCount(where: TeamBuildingKillWhereInput! = {}): Int
  teamMonsterKills(
    where: TeamMonsterKillWhereInput! = {}
    orderBy: [TeamMonsterKillOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [TeamMonsterKill!]
  teamMonsterKill(where: TeamMonsterKillWhereUniqueInput!): TeamMonsterKill
  teamMonsterKillsCount(where: TeamMonsterKillWhereInput! = {}): Int
  runeSelections(
    where: RuneSelectionWhereInput! = {}
    orderBy: [RuneSelectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [RuneSelection!]
  runeSelection(where: RuneSelectionWhereUniqueInput!): RuneSelection
  runeSelectionsCount(where: RuneSelectionWhereInput! = {}): Int
  runeStyles(
    where: RuneStyleWhereInput! = {}
    orderBy: [RuneStyleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [RuneStyle!]
  runeStyle(where: RuneStyleWhereUniqueInput!): RuneStyle
  runeStylesCount(where: RuneStyleWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
