
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.11.1
 * Query Engine version: efdf9b1183dddfd4258cd181a72125755215ab7b
 */
Prisma.prismaVersion = {
  client: "3.11.1",
  engine: "efdf9b1183dddfd4258cd181a72125755215ab7b"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.ActivityScalarFieldEnum = makeEnum({
  id: 'id',
  profileId: 'profileId',
  month: 'month',
  year: 'year',
  day: 'day',
  gamesPlayed: 'gamesPlayed'
});

exports.Prisma.ChampionWinrateScalarFieldEnum = makeEnum({
  id: 'id',
  profileId: 'profileId',
  champion: 'champion',
  wins: 'wins',
  games: 'games',
  spell1Casts: 'spell1Casts',
  spell2Casts: 'spell2Casts',
  spell3Casts: 'spell3Casts',
  spell4Casts: 'spell4Casts'
});

exports.Prisma.DuoScalarFieldEnum = makeEnum({
  id: 'id',
  profileId: 'profileId',
  name: 'name',
  wins: 'wins',
  losses: 'losses',
  winrate: 'winrate'
});

exports.Prisma.ConstantScalarFieldEnum = makeEnum({
  id: 'id',
  startTime: 'startTime',
  currentSeason: 'currentSeason',
  seeding: 'seeding'
});

exports.Prisma.EventScalarFieldEnum = makeEnum({
  id: 'id',
  timestamp: 'timestamp'
});

exports.Prisma.GameScalarFieldEnum = makeEnum({
  id: 'id',
  matchId: 'matchId',
  gameId: 'gameId',
  gameCreation: 'gameCreation',
  gameStartTimestamp: 'gameStartTimestamp',
  gameEndTimestamp: 'gameEndTimestamp',
  duration: 'duration',
  start: 'start',
  gameVersion: 'gameVersion',
  blueTeamId: 'blueTeamId',
  redTeamId: 'redTeamId',
  tournament: 'tournament',
  gameInSeries: 'gameInSeries',
  vod: 'vod',
  platformId: 'platformId'
});

exports.Prisma.ObjectiveScalarFieldEnum = makeEnum({
  id: 'id',
  teamId: 'teamId',
  first: 'first',
  kills: 'kills',
  type: 'type'
});

exports.Prisma.PickBanScalarFieldEnum = makeEnum({
  id: 'id',
  teamId: 'teamId',
  championId: 'championId',
  pickTurn: 'pickTurn'
});

exports.Prisma.PlayerScalarFieldEnum = makeEnum({
  id: 'id',
  puuid: 'puuid',
  accountId: 'accountId',
  platformId: 'platformId',
  summonerId: 'summonerId',
  summonerName: 'summonerName',
  summonerLevel: 'summonerLevel',
  profileIconId: 'profileIconId',
  revisionDate: 'revisionDate',
  profileId: 'profileId'
});

exports.Prisma.PlayerEndOfGameStatScalarFieldEnum = makeEnum({
  id: 'id',
  playerId: 'playerId',
  gameId: 'gameId',
  perksId: 'perksId',
  itemsId: 'itemsId',
  assists: 'assists',
  baronKills: 'baronKills',
  bountyLevel: 'bountyLevel',
  championExperience: 'championExperience',
  championLevel: 'championLevel',
  championId: 'championId',
  championName: 'championName',
  championTransform: 'championTransform',
  consumablesPurchased: 'consumablesPurchased',
  damageDealtToBuildings: 'damageDealtToBuildings',
  damageDealtToObjectives: 'damageDealtToObjectives',
  damageDealtToTurrets: 'damageDealtToTurrets',
  damageSelfMitigated: 'damageSelfMitigated',
  deaths: 'deaths',
  detectorWardsPlaced: 'detectorWardsPlaced',
  doubleKills: 'doubleKills',
  dragonKills: 'dragonKills',
  firstBlood: 'firstBlood',
  firstBloodAssist: 'firstBloodAssist',
  firstTowerKill: 'firstTowerKill',
  firstTowerAssist: 'firstTowerAssist',
  gameEndedInEarlySurrender: 'gameEndedInEarlySurrender',
  gameEndedInSurrender: 'gameEndedInSurrender',
  goldEarned: 'goldEarned',
  goldSpent: 'goldSpent',
  individualPosition: 'individualPosition',
  inhibitorKills: 'inhibitorKills',
  inhibitorTakedowns: 'inhibitorTakedowns',
  inhibitorsLost: 'inhibitorsLost',
  item0: 'item0',
  item1: 'item1',
  item2: 'item2',
  item3: 'item3',
  item4: 'item4',
  item5: 'item5',
  item6: 'item6',
  itemsPurchased: 'itemsPurchased',
  killingSprees: 'killingSprees',
  kills: 'kills',
  lane: 'lane',
  largestCriticalStrike: 'largestCriticalStrike',
  largestKillingSpree: 'largestKillingSpree',
  largestMultiKill: 'largestMultiKill',
  longestTimeSpentLiving: 'longestTimeSpentLiving',
  magicDamageDealt: 'magicDamageDealt',
  magicDamageDealtToChampions: 'magicDamageDealtToChampions',
  magicDamageTaken: 'magicDamageTaken',
  neutralMinionsKilled: 'neutralMinionsKilled',
  nexusKills: 'nexusKills',
  nexusLost: 'nexusLost',
  nexusTakedowns: 'nexusTakedowns',
  objectivesStolen: 'objectivesStolen',
  objectivesStolenAssists: 'objectivesStolenAssists',
  participantId: 'participantId',
  pentaKills: 'pentaKills',
  physicalDamageDealt: 'physicalDamageDealt',
  physicalDamageDealtToChampions: 'physicalDamageDealtToChampions',
  physicalDamageTaken: 'physicalDamageTaken',
  quadraKills: 'quadraKills',
  riotIdName: 'riotIdName',
  riotIdTagline: 'riotIdTagline',
  role: 'role',
  sightWardsBoughtInGame: 'sightWardsBoughtInGame',
  spell1Casts: 'spell1Casts',
  spell2Casts: 'spell2Casts',
  spell3Casts: 'spell3Casts',
  spell4Casts: 'spell4Casts',
  summoner1Casts: 'summoner1Casts',
  summoner1Id: 'summoner1Id',
  summoner2Casts: 'summoner2Casts',
  summoner2Id: 'summoner2Id',
  summonerLevel: 'summonerLevel',
  summonerName: 'summonerName',
  teamEarlySurrendered: 'teamEarlySurrendered',
  teamId: 'teamId',
  teamPosition: 'teamPosition',
  timeCCingOthers: 'timeCCingOthers',
  timePlayed: 'timePlayed',
  totalDamageDealt: 'totalDamageDealt',
  totalDamageDealtToChampions: 'totalDamageDealtToChampions',
  totalDamageShieldedOnTeammates: 'totalDamageShieldedOnTeammates',
  totalDamageTaken: 'totalDamageTaken',
  totalHeal: 'totalHeal',
  totalHealsOnTeammates: 'totalHealsOnTeammates',
  totalMinionsKilled: 'totalMinionsKilled',
  totalTimeCCDealt: 'totalTimeCCDealt',
  totalTimeSpentDead: 'totalTimeSpentDead',
  totalUnitsHealed: 'totalUnitsHealed',
  tripleKills: 'tripleKills',
  trueDamageDealt: 'trueDamageDealt',
  trueDamageDealtToChampions: 'trueDamageDealtToChampions',
  trueDamageTaken: 'trueDamageTaken',
  turretsKilled: 'turretsKilled',
  turretTakedowns: 'turretTakedowns',
  turretsLost: 'turretsLost',
  unrealKills: 'unrealKills',
  visionScore: 'visionScore',
  visionWardsBoughtInGame: 'visionWardsBoughtInGame',
  wardsKilled: 'wardsKilled',
  wardsPlaced: 'wardsPlaced',
  win: 'win'
});

exports.Prisma.PlayerItemScalarFieldEnum = makeEnum({
  id: 'id',
  slot: 'slot',
  itemId: 'itemId',
  name: 'name'
});

exports.Prisma.PlayerItemEventScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type',
  itemId: 'itemId',
  name: 'name',
  undoId: 'undoId'
});

exports.Prisma.PlayerKillScalarFieldEnum = makeEnum({
  id: 'id'
});

exports.Prisma.PlayerRuneScalarFieldEnum = makeEnum({
  id: 'id',
  defense: 'defense',
  flex: 'flex',
  offense: 'offense'
});

exports.Prisma.PlayerSkillLevelUpEventScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type',
  slot: 'slot'
});

exports.Prisma.PlayerSnapshotScalarFieldEnum = makeEnum({
  id: 'id',
  timestamp: 'timestamp',
  currentGold: 'currentGold',
  totalGold: 'totalGold',
  totalGoldDiff: 'totalGoldDiff',
  xp: 'xp',
  xpDiff: 'xpDiff',
  level: 'level',
  cs: 'cs',
  csDiff: 'csDiff',
  monstersKilled: 'monstersKilled',
  monstersKilledDiff: 'monstersKilledDiff'
});

exports.Prisma.PlayerWardEventScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type',
  wardType: 'wardType'
});

exports.Prisma.PositionScalarFieldEnum = makeEnum({
  id: 'id',
  x: 'x',
  y: 'y'
});

exports.Prisma.ProfileScalarFieldEnum = makeEnum({
  id: 'id',
  update: 'update',
  lastUpdate: 'lastUpdate',
  kills: 'kills',
  deaths: 'deaths',
  assists: 'assists',
  kda: 'kda',
  winRate: 'winRate',
  csPerMinute: 'csPerMinute',
  damagePerMinute: 'damagePerMinute',
  killsPerMinute: 'killsPerMinute',
  goldPerMinute: 'goldPerMinute',
  averageGameTime: 'averageGameTime',
  averageTimeSpentDead: 'averageTimeSpentDead',
  totalGameTime: 'totalGameTime'
});

exports.Prisma.SeedIdentifierScalarFieldEnum = makeEnum({
  id: 'id',
  identifier: 'identifier',
  type: 'type',
  timestamp: 'timestamp',
  priority: 'priority',
  retrieved: 'retrieved'
});

exports.Prisma.SourceScalarFieldEnum = makeEnum({
  id: 'id',
  api: 'api'
});

exports.Prisma.TeamScalarFieldEnum = makeEnum({
  id: 'id',
  gameId: 'gameId',
  teamId: 'teamId',
  teamMatchId: 'teamMatchId',
  win: 'win'
});

exports.Prisma.TeamBuildingKillScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type',
  lane: 'lane',
  side: 'side',
  towerLocation: 'towerLocation'
});

exports.Prisma.TeamMonsterKillScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type',
  subType: 'subType'
});

exports.Prisma.RuneSelectionScalarFieldEnum = makeEnum({
  id: 'id',
  runeStyleId: 'runeStyleId',
  perk: 'perk',
  var1: 'var1',
  var2: 'var2',
  var3: 'var3'
});

exports.Prisma.RuneStyleScalarFieldEnum = makeEnum({
  id: 'id',
  playerRunesId: 'playerRunesId',
  description: 'description',
  style: 'style'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});
exports.PlayerWardEventWardTypeType = makeEnum({
  YELLOW_TRINKET: 'YELLOW_TRINKET',
  CONTROL_WARD: 'CONTROL_WARD',
  SIGHT_WARD: 'SIGHT_WARD',
  YELLOW_TRINKET_UPGRADE: 'YELLOW_TRINKET_UPGRADE',
  BLUE_TRINKET: 'BLUE_TRINKET',
  TEEMO_MUSHROOM: 'TEEMO_MUSHROOM',
  VISION_WARD: 'VISION_WARD',
  UNDEFINED: 'UNDEFINED'
});

exports.Prisma.ModelName = makeEnum({
  Activity: 'Activity',
  ChampionWinrate: 'ChampionWinrate',
  Duo: 'Duo',
  Constant: 'Constant',
  Event: 'Event',
  Game: 'Game',
  Objective: 'Objective',
  PickBan: 'PickBan',
  Player: 'Player',
  PlayerEndOfGameStat: 'PlayerEndOfGameStat',
  PlayerItem: 'PlayerItem',
  PlayerItemEvent: 'PlayerItemEvent',
  PlayerKill: 'PlayerKill',
  PlayerRune: 'PlayerRune',
  PlayerSkillLevelUpEvent: 'PlayerSkillLevelUpEvent',
  PlayerSnapshot: 'PlayerSnapshot',
  PlayerWardEvent: 'PlayerWardEvent',
  Position: 'Position',
  Profile: 'Profile',
  SeedIdentifier: 'SeedIdentifier',
  Source: 'Source',
  Team: 'Team',
  TeamBuildingKill: 'TeamBuildingKill',
  TeamMonsterKill: 'TeamMonsterKill',
  RuneSelection: 'RuneSelection',
  RuneStyle: 'RuneStyle'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
